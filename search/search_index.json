{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease! Source Code : https://github.com/FollowTheProcess/pytoil Documentation : https://FollowTheProcess.github.io/pytoil/ pytoil is still in Alpha and as such, the API may change without deprecation notices. What is it? \u00b6 pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It's primarily aimed at python developers but you could easily use it to manage any project! pytoil is: Easy to use Easy to configure Safe (it won't edit your repos at all) Useful! (I hope ) Say goodbye to janky bash scripts Background \u00b6 Like many developers I suspect, I quickly became bored of typing repeated commands to manage my projects, create virtual environments, install packages, fire off cURL snippets to check if I had a certain repo etc. So I wrote some shell functions to do some of this for me... And these shell functions grew and grew and grew. Until one day I saw that the file I kept these functions in was over 1000 lines of bash (a lot of printf 's so it wasn't all logic but still). And 1000 lines of bash is waaaay too much! And because I'd basically hacked it all together, it was very fragile. If a part of a function failed, it would just carry on and wreak havoc! I'd have to do rm -rf all_my_projects ... I mean careful forensic investigation to fix it. So I decided to make a robust CLI with the proper error handling and testability of python, and here it is! Installation \u00b6 As pytoil is a CLI program, I'd recommend installing with pipx . $ pipx install pytoil ---> 100% Successfully installed pytoil Note If you don't know what pipx is, go check it out! But basically it allows python CLI tools to be installed in their own sandboxed environments but you can still access the CLI as if it was installed globally! You can always fall back to pip $ python3 -m pip install pytoil ---> 100% Successfully installed pytoil Warning keep in mind though, you'll have to install it globally for it to work so it might be better to use pipx pytoil will install everything it needs in python to work. However, it's full feature set can only be accessed if you have the following external dependencies: git conda (if you work with conda environments) VSCode (if you want to use pytoil to automatically open your projects for you) Quickstart \u00b6 pytoil is super easy to get started with. After installation, the first time you run it it will make you a config file. $ pytoil No config file yet! Making you a default one... This will create a default config file which can be found at ~/.pytoil.yml . See config for what information you need to put in here. Don't worry though, there's only a few options to configure! After you've set your config, you're good to go! You can do things like: See your local and remote projects \u00b6 $ pytoil show all Local Projects: - Project1 - Project2 - Project3 Remote Projects: - Remote1 - Remote2 - etc.. See which ones you have on GitHub, but not on your computer \u00b6 $ pytoil show diff Diff: Remote - Local: - Projectyoudonthave1 - Projectyoudonthave2 Easily grab a project, regardless of where it is \u00b6 $ pytoil checkout myproject Resuming 'myproject'... // Will now either open that project if local // or clone it, then open it if not Create a new project and virtual environment in one go \u00b6 $ pytoil new myproject --venv venv Creating project: 'myproject' at '/Users/you/projects/myproject' Creating virtual environment for: 'myproject' And even do this from a cookiecutter template \u00b6 $ pytoil new myproject --venv venv --cookie https://github.com/some/cookie.git Creating project: 'myproject' with cookiecutter template: 'https://github.com/some/cookie.git' // You'll then be asked all the cookiecutter questions defined in the template // After which pytoil will take over and create the virtual environment as normal Help \u00b6 Like all good CLI programs, pytoil (aswell as all it's subcommands, and all their subcommands!) has a --help option to show you what to do. $ pytoil --help Usage: pytoil [OPTIONS] COMMAND [ARGS]... Helpful CLI to automate the development workflow. - Create and manage your local and remote projects - Build projects from cookiecutter templates. - Easily create/manage virtual environments. - Minimal configuration required. Options: -V, --version Display pytoil version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: checkout Checkout an existing development project. config Interact with pytoil's configuration. docs Open pytoil's documentation in your browser. gh Open one of your projects on GitHub. info Get useful info for a project. new Create a new development project. pull Pull down your remote projects. remove Remove projects from your local filesystem. show View your local/remote projects. Info pytoil's CLI is designed such that if you don't specify any arguments, it won't do anything! just show you the --help . This is called being a 'well behaved' unix command line tool. This is true for any subcommand of pytoil so you won't accidently break anything if you don't specify arguments . And if you get truly stuck, you can quickly open pytoil's documentation with: $ pytoil docs Opening pytoil's documentation in your browser... // Now you'll be on this page in whatever your default browser is!","title":"Home"},{"location":"index.html#what-is-it","text":"pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It's primarily aimed at python developers but you could easily use it to manage any project! pytoil is: Easy to use Easy to configure Safe (it won't edit your repos at all) Useful! (I hope ) Say goodbye to janky bash scripts","title":"What is it?"},{"location":"index.html#background","text":"Like many developers I suspect, I quickly became bored of typing repeated commands to manage my projects, create virtual environments, install packages, fire off cURL snippets to check if I had a certain repo etc. So I wrote some shell functions to do some of this for me... And these shell functions grew and grew and grew. Until one day I saw that the file I kept these functions in was over 1000 lines of bash (a lot of printf 's so it wasn't all logic but still). And 1000 lines of bash is waaaay too much! And because I'd basically hacked it all together, it was very fragile. If a part of a function failed, it would just carry on and wreak havoc! I'd have to do rm -rf all_my_projects ... I mean careful forensic investigation to fix it. So I decided to make a robust CLI with the proper error handling and testability of python, and here it is!","title":"Background"},{"location":"index.html#installation","text":"As pytoil is a CLI program, I'd recommend installing with pipx . $ pipx install pytoil ---> 100% Successfully installed pytoil Note If you don't know what pipx is, go check it out! But basically it allows python CLI tools to be installed in their own sandboxed environments but you can still access the CLI as if it was installed globally! You can always fall back to pip $ python3 -m pip install pytoil ---> 100% Successfully installed pytoil Warning keep in mind though, you'll have to install it globally for it to work so it might be better to use pipx pytoil will install everything it needs in python to work. However, it's full feature set can only be accessed if you have the following external dependencies: git conda (if you work with conda environments) VSCode (if you want to use pytoil to automatically open your projects for you)","title":"Installation"},{"location":"index.html#quickstart","text":"pytoil is super easy to get started with. After installation, the first time you run it it will make you a config file. $ pytoil No config file yet! Making you a default one... This will create a default config file which can be found at ~/.pytoil.yml . See config for what information you need to put in here. Don't worry though, there's only a few options to configure! After you've set your config, you're good to go! You can do things like:","title":"Quickstart"},{"location":"index.html#see-your-local-and-remote-projects","text":"$ pytoil show all Local Projects: - Project1 - Project2 - Project3 Remote Projects: - Remote1 - Remote2 - etc..","title":"See your local and remote projects"},{"location":"index.html#see-which-ones-you-have-on-github-but-not-on-your-computer","text":"$ pytoil show diff Diff: Remote - Local: - Projectyoudonthave1 - Projectyoudonthave2","title":"See which ones you have on GitHub, but not on your computer"},{"location":"index.html#easily-grab-a-project-regardless-of-where-it-is","text":"$ pytoil checkout myproject Resuming 'myproject'... // Will now either open that project if local // or clone it, then open it if not","title":"Easily grab a project, regardless of where it is"},{"location":"index.html#create-a-new-project-and-virtual-environment-in-one-go","text":"$ pytoil new myproject --venv venv Creating project: 'myproject' at '/Users/you/projects/myproject' Creating virtual environment for: 'myproject'","title":"Create a new project and virtual environment in one go"},{"location":"index.html#and-even-do-this-from-a-cookiecutter-template","text":"$ pytoil new myproject --venv venv --cookie https://github.com/some/cookie.git Creating project: 'myproject' with cookiecutter template: 'https://github.com/some/cookie.git' // You'll then be asked all the cookiecutter questions defined in the template // After which pytoil will take over and create the virtual environment as normal","title":"And even do this from a cookiecutter template"},{"location":"index.html#help","text":"Like all good CLI programs, pytoil (aswell as all it's subcommands, and all their subcommands!) has a --help option to show you what to do. $ pytoil --help Usage: pytoil [OPTIONS] COMMAND [ARGS]... Helpful CLI to automate the development workflow. - Create and manage your local and remote projects - Build projects from cookiecutter templates. - Easily create/manage virtual environments. - Minimal configuration required. Options: -V, --version Display pytoil version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: checkout Checkout an existing development project. config Interact with pytoil's configuration. docs Open pytoil's documentation in your browser. gh Open one of your projects on GitHub. info Get useful info for a project. new Create a new development project. pull Pull down your remote projects. remove Remove projects from your local filesystem. show View your local/remote projects. Info pytoil's CLI is designed such that if you don't specify any arguments, it won't do anything! just show you the --help . This is called being a 'well behaved' unix command line tool. This is true for any subcommand of pytoil so you won't accidently break anything if you don't specify arguments . And if you get truly stuck, you can quickly open pytoil's documentation with: $ pytoil docs Opening pytoil's documentation in your browser... // Now you'll be on this page in whatever your default browser is!","title":"Help"},{"location":"changelog.html","text":"Changelog \u00b6 0.7.0 \u00b6 NEW: pytoil checkout can now fork someone else's repo is \"user/repo\" pattern is passed as an argument FIX: Fix unnecessary error when using pytoil new with --venv and no starter 0.6.3 \u00b6 NEW: pytoil config get now prints the key in a nice colour too NEW: pytoil --version outputs a much more comprehensive list of version info 0.6.2 \u00b6 NEW: pytoil config show now prints the keys in a nice colour NEW: Added some fun ASCII art on pytoil --version 0.6.1 \u00b6 NEW: pytoil show subcommands now have --count/-c option which shows a count of projects rather than simply listing them out. FIX: Fix bug where pytoil would incorrectly error on new if certain combinations of args were used. 0.6.0 \u00b6 NEW: User can now initialise basic starter templates for multiple languages (currently support python, go and rust) NEW: pytoil remove and pytoil pull changed to take projects as arguments, remove|pull all functionality is now in the --all option. FIX: pytoil now supports the python.defaultInterpreterPath workspace setting rather than the soon to be deprecated python.pythonPath . See: https://github.com/microsoft/vscode-python/issues/12313 FIX: On checking out a local project, pytoil no longer needs to call the GitHub API to determine if it exists remotely, improving performance of this command. MAINT: Refactored CLI so that each command has it's own file 0.5.0 \u00b6 Complete rewrite from the ground up! NEW: pytoil now supports a variety of conda installations NEW: pytoil sync changed to pytoil pull NEW: User can configure whether or not to create a git repo on new NEW: Additional packages can now be passed in as extra arguments when creating an environment with pytoil new NEW: Friendlier output to the user during operations and awesome loading spinners NEW: Output from invoked external tools is now captured and only surfaced when something goes wrong NEW: If $GITHUB_TOKEN is present in the environment, pytoil will fall back to that if token is not set in the config file NEW: User can now interact with the config file via the tool itself FIX: pytoil now handles common errors much nicer (missing config file, bad github token etc.) FIX: Much better error handling all round CLN: Complete internal rewrite, better cohesion and looser coupling CLN: Less reliance on mocks during tests MAINT: Project build tool switched to poetry Probably more but I forget. 0.4.2 \u00b6 NEW: pytoil now supports the use of miniforge as a conda installation CLN: Some minor refactorings and code clean up 0.4.1 \u00b6 NEW: pytoil checkout default behaviour changed to not create virtual environment. Now available through the --venv option bringing it in line with pytoil new Various meta project tweaks and tidying up 0.4.0 \u00b6 NEW: pytoil create changed to pytoil new 0.3.2 \u00b6 BUG: Fix bug where pytoil info on a repo with no OSS license would cause an error. Now just displays None for license . 0.3.1 \u00b6 NEW: pytoil remove now accepts list of projects to remove NEW: pytoil create now initialises an empty git repo in non-cookiecutter projects NEW: pytoil remove now accepts a --all flag to remove all projects from local directory 0.3.0 \u00b6 NEW: User can now specify a list of packages to inject into every environment pytoil creates Internal config management now far simpler, makes changing or adding configurable features much easier pytoil config CLI drastically simplified NEW: Added pytoil docs command to open the package documentation in users default browser NEW: Added pytoil gh command to open the GitHub page for a project. 0.2.0 \u00b6 FIX: pytoil init now gracefully exits on ctrl+c preventing a bug where if a user aborted halfway through, the config file would appear to have been written but would not be valid and raise an ugly error on next use. NEW: All commands that were in pytoil project are now available from the root command. E.g. instead of typing pytoil project checkout you may now simply use pytoil checkout . 0.1.0 \u00b6 First release.","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#070","text":"NEW: pytoil checkout can now fork someone else's repo is \"user/repo\" pattern is passed as an argument FIX: Fix unnecessary error when using pytoil new with --venv and no starter","title":"0.7.0"},{"location":"changelog.html#063","text":"NEW: pytoil config get now prints the key in a nice colour too NEW: pytoil --version outputs a much more comprehensive list of version info","title":"0.6.3"},{"location":"changelog.html#062","text":"NEW: pytoil config show now prints the keys in a nice colour NEW: Added some fun ASCII art on pytoil --version","title":"0.6.2"},{"location":"changelog.html#061","text":"NEW: pytoil show subcommands now have --count/-c option which shows a count of projects rather than simply listing them out. FIX: Fix bug where pytoil would incorrectly error on new if certain combinations of args were used.","title":"0.6.1"},{"location":"changelog.html#060","text":"NEW: User can now initialise basic starter templates for multiple languages (currently support python, go and rust) NEW: pytoil remove and pytoil pull changed to take projects as arguments, remove|pull all functionality is now in the --all option. FIX: pytoil now supports the python.defaultInterpreterPath workspace setting rather than the soon to be deprecated python.pythonPath . See: https://github.com/microsoft/vscode-python/issues/12313 FIX: On checking out a local project, pytoil no longer needs to call the GitHub API to determine if it exists remotely, improving performance of this command. MAINT: Refactored CLI so that each command has it's own file","title":"0.6.0"},{"location":"changelog.html#050","text":"Complete rewrite from the ground up! NEW: pytoil now supports a variety of conda installations NEW: pytoil sync changed to pytoil pull NEW: User can configure whether or not to create a git repo on new NEW: Additional packages can now be passed in as extra arguments when creating an environment with pytoil new NEW: Friendlier output to the user during operations and awesome loading spinners NEW: Output from invoked external tools is now captured and only surfaced when something goes wrong NEW: If $GITHUB_TOKEN is present in the environment, pytoil will fall back to that if token is not set in the config file NEW: User can now interact with the config file via the tool itself FIX: pytoil now handles common errors much nicer (missing config file, bad github token etc.) FIX: Much better error handling all round CLN: Complete internal rewrite, better cohesion and looser coupling CLN: Less reliance on mocks during tests MAINT: Project build tool switched to poetry Probably more but I forget.","title":"0.5.0"},{"location":"changelog.html#042","text":"NEW: pytoil now supports the use of miniforge as a conda installation CLN: Some minor refactorings and code clean up","title":"0.4.2"},{"location":"changelog.html#041","text":"NEW: pytoil checkout default behaviour changed to not create virtual environment. Now available through the --venv option bringing it in line with pytoil new Various meta project tweaks and tidying up","title":"0.4.1"},{"location":"changelog.html#040","text":"NEW: pytoil create changed to pytoil new","title":"0.4.0"},{"location":"changelog.html#032","text":"BUG: Fix bug where pytoil info on a repo with no OSS license would cause an error. Now just displays None for license .","title":"0.3.2"},{"location":"changelog.html#031","text":"NEW: pytoil remove now accepts list of projects to remove NEW: pytoil create now initialises an empty git repo in non-cookiecutter projects NEW: pytoil remove now accepts a --all flag to remove all projects from local directory","title":"0.3.1"},{"location":"changelog.html#030","text":"NEW: User can now specify a list of packages to inject into every environment pytoil creates Internal config management now far simpler, makes changing or adding configurable features much easier pytoil config CLI drastically simplified NEW: Added pytoil docs command to open the package documentation in users default browser NEW: Added pytoil gh command to open the GitHub page for a project.","title":"0.3.0"},{"location":"changelog.html#020","text":"FIX: pytoil init now gracefully exits on ctrl+c preventing a bug where if a user aborted halfway through, the config file would appear to have been written but would not be valid and raise an ugly error on next use. NEW: All commands that were in pytoil project are now available from the root command. E.g. instead of typing pytoil project checkout you may now simply use pytoil checkout .","title":"0.2.0"},{"location":"changelog.html#010","text":"First release.","title":"0.1.0"},{"location":"config.html","text":"Config \u00b6 Required \u00b6 There's really not much to configure, all pytoil needs you to specify is: What your GitHub username is ( username ) Your GitHub personal access token ( token ) If you don't know how to generate a GitHub token, check out the docs . Optional \u00b6 There are also some optional configurations you can tweak: Key Definition Default projects_dir Where you keep your projects $HOME/Development vscode Whether you want pytoil to open things in VSCode False common_packages List of packages you want pytoil to inject in every environment it creates (linters, formatters etc.) None init_on_new Whether you want pytoil to initialise an empty git repo when it makes a fresh project True These optional settings don't have to be set if you're happy using the default settings! Info Don't worry about giving pytoil your personal token. All we do with it is make HTTP GET requests to the GitHub API using your token to authenticate the requests so we can tell which repos you have on GitHub and some very basic information about them. In fact, the only permissions pytoil needs is read repo access! Note I used VSCode as the only configurable editor as it's the one I use and is therefore the only one I have experience with configuring programmatically and launching via the command line. If you want to help add support for more editors then PR's are always welcome! The Config File \u00b6 After you install pytoil, the first time you run it you'll get something like this. $ pytoil No config file yet! Making you a default one... pytoil will then will write a default config state to a file: ~/.pytoil.yml . Note This command will only write a config file if it doesn't find one already. If one already exists, it will simply show you the settings from that file. When you open the default config state you just wrote, it will look like this: # ~/.pytoil.yml projects_dir : /Users/you/Development token : This is your GitHub personal access token username : This is your GitHub username vscode : false init_on_new : true Warning projects_dir must be the absolute path to where you keep your projects. So you'll need to explicitly state the entire path (as in the example above) starting from the root. You should now edit the config file to your liking. Your username and token are required for GitHub API access and will cause an error on most pytoil operations so these must be filled out. Everything else is optional So as an example, your filled out config file might look like this: # ~/.pytoil.yml projects_dir : /Users/me/Projects token : jbs822qbs982whbd97g # I've made this up username : FollowTheProcess vscode : true common_packages : - black - flake8 - mypy>=0.790 - isort init_on_new : true Tip You can also interact with the pytoil config file via pytoil itself using the pytoil config command group.","title":"Config"},{"location":"config.html#config","text":"","title":"Config"},{"location":"config.html#required","text":"There's really not much to configure, all pytoil needs you to specify is: What your GitHub username is ( username ) Your GitHub personal access token ( token ) If you don't know how to generate a GitHub token, check out the docs .","title":"Required"},{"location":"config.html#optional","text":"There are also some optional configurations you can tweak: Key Definition Default projects_dir Where you keep your projects $HOME/Development vscode Whether you want pytoil to open things in VSCode False common_packages List of packages you want pytoil to inject in every environment it creates (linters, formatters etc.) None init_on_new Whether you want pytoil to initialise an empty git repo when it makes a fresh project True These optional settings don't have to be set if you're happy using the default settings! Info Don't worry about giving pytoil your personal token. All we do with it is make HTTP GET requests to the GitHub API using your token to authenticate the requests so we can tell which repos you have on GitHub and some very basic information about them. In fact, the only permissions pytoil needs is read repo access! Note I used VSCode as the only configurable editor as it's the one I use and is therefore the only one I have experience with configuring programmatically and launching via the command line. If you want to help add support for more editors then PR's are always welcome!","title":"Optional"},{"location":"config.html#the-config-file","text":"After you install pytoil, the first time you run it you'll get something like this. $ pytoil No config file yet! Making you a default one... pytoil will then will write a default config state to a file: ~/.pytoil.yml . Note This command will only write a config file if it doesn't find one already. If one already exists, it will simply show you the settings from that file. When you open the default config state you just wrote, it will look like this: # ~/.pytoil.yml projects_dir : /Users/you/Development token : This is your GitHub personal access token username : This is your GitHub username vscode : false init_on_new : true Warning projects_dir must be the absolute path to where you keep your projects. So you'll need to explicitly state the entire path (as in the example above) starting from the root. You should now edit the config file to your liking. Your username and token are required for GitHub API access and will cause an error on most pytoil operations so these must be filled out. Everything else is optional So as an example, your filled out config file might look like this: # ~/.pytoil.yml projects_dir : /Users/me/Projects token : jbs822qbs982whbd97g # I've made this up username : FollowTheProcess vscode : true common_packages : - black - flake8 - mypy>=0.790 - isort init_on_new : true Tip You can also interact with the pytoil config file via pytoil itself using the pytoil config command group.","title":"The Config File"},{"location":"contributing.html","text":"Contributing to pytoil \u00b6 I've tried to structure pytoil to make it nice and easy for people to contribute. Here's how to go about doing it! Developing \u00b6 If you want to fix a bug, improve the docs, add tests, add a feature or any other type of direct contribution to pytoil: here's how you do it! To work on pytoil you'll need python >=3.8 Step 1: Fork pytoil \u00b6 The first thing to do is 'fork' pytoil. This will put a version of it on your GitHub page. This means you can change that fork all you want and the actual version of pytoil still works! To create a fork, go to the pytoil repo and click on the fork button! Step 2: Clone your fork \u00b6 Navigate to where you do your development work on your machine and open a terminal If you use HTTPS: git clone https://github.com/<your_github_username>/pytoil.git If you use SSH: git clone git@github.com:<your_github_username>/pytoil.git Or you can be really fancy and use the GH CLI gh repo clone <your_github_username>/pytoil HTTPS is probably the one most people use! Once you've cloned the project, cd into it... cd pytoil This will take you into the root directory of the project. Now add the original pytoil repo as an upstream in your forked project: git remote add upstream https://github.com/FollowTheProcess/pytoil.git This makes the original version of pytoil upstream but not origin . Basically, this means that if your working on it for a while and the original project has changed in the meantime, you can do: git checkout main git fetch upstream git merge upstream/main git push origin main This will (in order): Checkout the main branch of your locally cloned fork Fetch any changes from the original project that have happened since you forked it Merge those changes in with what you have Push those changes up to your fork so your fork stays up to date with the original. Note Good practice is to do this before you start doing anything every time you start work, then the chances of you getting conflicting commits later on is much lower! Step 3: Create the Environment \u00b6 Before you do anything, you'll want to set up your development environment... pytoil uses [poetry] to manage development and nox for automation superpowers. So to work on it you'll need to get both of those tools too! I recommend using pipx for python command line tools like these, it installs each tool in it's own isolated environment but exposes the command to your terminal as if you installed it globally. We've automated the crap out of the development process for pytoil, to get started all you need to do is run: nox Note If you've never used nox before, go check it out. It's great! It's an amazing project automation toolkit, you can do just about anything with it but it's especially good at things like this! When you run this, nox will: Create a fresh python virtual environment in the project for you (.venv) Install pytoil for you along with all of it's development dependencies Make sure VSCode is set up to use this environment (if you use it) Not bad for a single command! Doing it this way means that before you start working on pytoil you know its all been installed and works correctly. Wait for it to do it's thing and then you can get started. Note The next time you run nox , it won't do this step again. It will run all the project tests, lint and format the source code, analyse test coverage and build the docs Step 4: Do your thing \u00b6 Always checkout a new branch before changing anything git checkout -b <name-of-your-bugfix-or-feature> Now you're ready to start working! Remember! pytoil aims for high test coverage. If you implement a new feature, make sure to write tests for it! Similarly, if you fix a bug, it's good practice to write a test that would have caught that bug so we can be sure it doesn't reappear in the future! pytoil uses nox for automated testing, building the docs, formatting and linting etc. So when you've made your changes, just run: nox And it will tell you if something's wrong! Step 5: Commit your changes \u00b6 Once you're happy with what you've done, add the files you've changed: git add <changed-file ( s ) > # Might be easier to do git add -A # But be wary of this and check what it's added is what you wanted.. git status Commit your changes: git commit # Now write a good commit message explaining what you've done and why. While you were working on your changes, the original project might have changed (due to other people working on it). So first, you should rebase your current branch from the upstream destination. Doing this means that when you do your PR, it's all compatible: git pull --rebase upstream main Now push your changes to your fork: git push origin <your-branch-name> Step 6: Create a Pull Request \u00b6 Now go to the original pytoil repo and create a Pull Request. Make sure to choose upstream repo \"main\" as the destination branch and your forked repo \"your-branch-name\" as the source. Thats it! Your code will be tested automatically by pytoil's CI suite and if everything passes and your PR is approved and merged then it will become part of pytoil! Note: There is a good guide to open source contribution workflow here and also here too Contributing to Docs \u00b6 Any improvements to the documentation are always appreciated! pytoil uses mkdocs with the mkdocs-material theme so the documentation is all written in markdown and can be found in the docs folder in the project root. Because pytoil uses nox , things like building and serving the documentation is super easy. All you have to do is: # Builds the docs nox -s docs # Builds and serves nox -s docs -- serve If you use the serve option, you can navigate to the localhost IP address it gives you and as you make changes to the source files, it will automatically reload your browser! Automation is power! If you add pages to the docs, make sure they are placed in the nav tree in the mkdocs.yml file and you're good to go!","title":"Contributing"},{"location":"contributing.html#contributing-to-pytoil","text":"I've tried to structure pytoil to make it nice and easy for people to contribute. Here's how to go about doing it!","title":"Contributing to pytoil"},{"location":"contributing.html#developing","text":"If you want to fix a bug, improve the docs, add tests, add a feature or any other type of direct contribution to pytoil: here's how you do it! To work on pytoil you'll need python >=3.8","title":"Developing"},{"location":"contributing.html#step-1-fork-pytoil","text":"The first thing to do is 'fork' pytoil. This will put a version of it on your GitHub page. This means you can change that fork all you want and the actual version of pytoil still works! To create a fork, go to the pytoil repo and click on the fork button!","title":"Step 1: Fork pytoil"},{"location":"contributing.html#step-2-clone-your-fork","text":"Navigate to where you do your development work on your machine and open a terminal If you use HTTPS: git clone https://github.com/<your_github_username>/pytoil.git If you use SSH: git clone git@github.com:<your_github_username>/pytoil.git Or you can be really fancy and use the GH CLI gh repo clone <your_github_username>/pytoil HTTPS is probably the one most people use! Once you've cloned the project, cd into it... cd pytoil This will take you into the root directory of the project. Now add the original pytoil repo as an upstream in your forked project: git remote add upstream https://github.com/FollowTheProcess/pytoil.git This makes the original version of pytoil upstream but not origin . Basically, this means that if your working on it for a while and the original project has changed in the meantime, you can do: git checkout main git fetch upstream git merge upstream/main git push origin main This will (in order): Checkout the main branch of your locally cloned fork Fetch any changes from the original project that have happened since you forked it Merge those changes in with what you have Push those changes up to your fork so your fork stays up to date with the original. Note Good practice is to do this before you start doing anything every time you start work, then the chances of you getting conflicting commits later on is much lower!","title":"Step 2: Clone your fork"},{"location":"contributing.html#step-3-create-the-environment","text":"Before you do anything, you'll want to set up your development environment... pytoil uses [poetry] to manage development and nox for automation superpowers. So to work on it you'll need to get both of those tools too! I recommend using pipx for python command line tools like these, it installs each tool in it's own isolated environment but exposes the command to your terminal as if you installed it globally. We've automated the crap out of the development process for pytoil, to get started all you need to do is run: nox Note If you've never used nox before, go check it out. It's great! It's an amazing project automation toolkit, you can do just about anything with it but it's especially good at things like this! When you run this, nox will: Create a fresh python virtual environment in the project for you (.venv) Install pytoil for you along with all of it's development dependencies Make sure VSCode is set up to use this environment (if you use it) Not bad for a single command! Doing it this way means that before you start working on pytoil you know its all been installed and works correctly. Wait for it to do it's thing and then you can get started. Note The next time you run nox , it won't do this step again. It will run all the project tests, lint and format the source code, analyse test coverage and build the docs","title":"Step 3: Create the Environment"},{"location":"contributing.html#step-4-do-your-thing","text":"Always checkout a new branch before changing anything git checkout -b <name-of-your-bugfix-or-feature> Now you're ready to start working! Remember! pytoil aims for high test coverage. If you implement a new feature, make sure to write tests for it! Similarly, if you fix a bug, it's good practice to write a test that would have caught that bug so we can be sure it doesn't reappear in the future! pytoil uses nox for automated testing, building the docs, formatting and linting etc. So when you've made your changes, just run: nox And it will tell you if something's wrong!","title":"Step 4: Do your thing"},{"location":"contributing.html#step-5-commit-your-changes","text":"Once you're happy with what you've done, add the files you've changed: git add <changed-file ( s ) > # Might be easier to do git add -A # But be wary of this and check what it's added is what you wanted.. git status Commit your changes: git commit # Now write a good commit message explaining what you've done and why. While you were working on your changes, the original project might have changed (due to other people working on it). So first, you should rebase your current branch from the upstream destination. Doing this means that when you do your PR, it's all compatible: git pull --rebase upstream main Now push your changes to your fork: git push origin <your-branch-name>","title":"Step 5: Commit your changes"},{"location":"contributing.html#step-6-create-a-pull-request","text":"Now go to the original pytoil repo and create a Pull Request. Make sure to choose upstream repo \"main\" as the destination branch and your forked repo \"your-branch-name\" as the source. Thats it! Your code will be tested automatically by pytoil's CI suite and if everything passes and your PR is approved and merged then it will become part of pytoil! Note: There is a good guide to open source contribution workflow here and also here too","title":"Step 6: Create a Pull Request"},{"location":"contributing.html#contributing-to-docs","text":"Any improvements to the documentation are always appreciated! pytoil uses mkdocs with the mkdocs-material theme so the documentation is all written in markdown and can be found in the docs folder in the project root. Because pytoil uses nox , things like building and serving the documentation is super easy. All you have to do is: # Builds the docs nox -s docs # Builds and serves nox -s docs -- serve If you use the serve option, you can navigate to the localhost IP address it gives you and as you make changes to the source files, it will automatically reload your browser! Automation is power! If you add pages to the docs, make sure they are placed in the nav tree in the mkdocs.yml file and you're good to go!","title":"Contributing to Docs"},{"location":"commands/checkout.html","text":"Checkout \u00b6 checkout (not to be confused with git checkout ) allows to easily resume work on an ongoing development project. Help \u00b6 // Some project thats already local $ pytoil checkout --help Usage: pytoil checkout [OPTIONS] PROJECT Checkout an existing development project. The checkout command lets you easily resume work on an existing project, whether that project is available locally in your configured projects directory, or if it is on GitHub. If pytoil finds your project locally, and you have enabled VSCode in your config file it will open it for you. If not, it will just tell you it already exists locally and where to find it. If your project is on your GitHub, pytoil will clone it for you and then open it (or tell you where it cloned it if you dont have VSCode set up). Finally, if checkout can't find a match after searching locally and on GitHub, it will prompt you to use 'pytoil new' to create a new one. If you pass the shorthand to someone elses repo e.g. 'someoneelse/repo' pytoil will detect this and automatically create a fork of this repo for you. Forking happens asynchronously so we can't clone your fork straight away. Give it a few seconds then a 'pytoil checkout repo' will bring it down as normal. You can also ask pytoil to automatically create a virtual environment on checkout with the '--venv/-v' flag. This only happens for projects pulled down from GitHub to avoid accidentally screwing up local projects. If the '--venv/-v' flag is used, pytoil will look at your project to try and detect which type of environment to create (conda or standard python). More info can be found in the documentation. Examples: $ pytoil checkout my_project $ pytoil checkout my_project --venv $ pytoil checkout someoneelse/project Arguments: PROJECT Name of the project to checkout. [required] Options: -v, --venv Attempt to auto-create a virtual environment. --help Show this message and exit. Local Project \u00b6 If the project is available locally, checkout will simply open it for you // Some project thats already local $ pytoil checkout my_local_project Project: 'my_local_project' found locally! Opening 'my_github_project' in VSCode... Remote Project \u00b6 If pytoil can't find your project locally, checkout will: Clone it to your projects directory Open it for you (if you configure VSCode in config ) // Some project thats on GitHub $ pytoil checkout my_github_project Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Opening 'my_github_project' in VSCode... Why just VSCode? When developing pytoil I was debating how to handle this. I use VSCode for everything but I know other people have different editor preferences. Initially I looked at using the $EDITOR environment variable but working out how best to launch a variety of possible editors from a CLI was tricky. Plus pytoil does things like alter workspace settings to point at the right virtual environment, and I only know how to do this with VSCode. PR's are very welcome though if you think you can introduce support for your preferred editor! Someone else's project \u00b6 A common workflow in open source is to fork someone elses project and then work on your fork. With pytoil this can be done in the same command! If you provide the shorthand repo path to pytoil checkout e.g. someoneelse/repo , pytoil will fork the repo for you! // Someone else's project $ pytoil checkout someone/their_github_project Project: 'someone/their_github_project' belongs to 'someone'. Making you a fork. Done! Note: Forking happens asynchronously on GitHub which means it may not be available to clone right away Note As it says in the command line above, pytoil can't clone your fork right away because it happens in the background on GitHub's end which means when we get the 202: Accepted response from the API, there's no guarantee that your fork exists yet. The best bet is to give it a few seconds and then try checking it out as normal Automatically Create a Virtual Environment \u00b6 If you pass the --venv option, checkout will also: Try to detect what environment would work best for the project (conda or virtualenv) Auto create this virtual environment and install any configured common packages If you have VSCode configured, pytoil will also set your workspace python.defaultInterpreterPath Note From about version 1.57.1, VSCode have been deprecating the workspace setting python.pythonPath in favour of python.defaultInterpreterPath which up until v0.6.0, pytoil used as part of the whole \"automate your dev life\" thing! These settings do differ in their functionality, which you can read about here: https://github.com/microsoft/vscode-python/issues/12313 . But it turns out that because the only time we set this is when creating brand new projects, or checking out remote projects, these settings behave exactly the same for us, so it effectively represents a straight swap. // Some project thats on GitHub $ pytoil checkout my_github_project --venv Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Auto-creating correct virtual environment // Here you might see some conda or venv stuff Opening 'my_github_project' in VSCode... Note pytoil looks for certain files in your project (like setup.py , setup.cfg , environment.yml etc.) and that's how it decides which environment to create. If it isn't totally sure what environment to create, it will just skip this step and let you know!","title":"Checkout"},{"location":"commands/checkout.html#checkout","text":"checkout (not to be confused with git checkout ) allows to easily resume work on an ongoing development project.","title":"Checkout"},{"location":"commands/checkout.html#help","text":"// Some project thats already local $ pytoil checkout --help Usage: pytoil checkout [OPTIONS] PROJECT Checkout an existing development project. The checkout command lets you easily resume work on an existing project, whether that project is available locally in your configured projects directory, or if it is on GitHub. If pytoil finds your project locally, and you have enabled VSCode in your config file it will open it for you. If not, it will just tell you it already exists locally and where to find it. If your project is on your GitHub, pytoil will clone it for you and then open it (or tell you where it cloned it if you dont have VSCode set up). Finally, if checkout can't find a match after searching locally and on GitHub, it will prompt you to use 'pytoil new' to create a new one. If you pass the shorthand to someone elses repo e.g. 'someoneelse/repo' pytoil will detect this and automatically create a fork of this repo for you. Forking happens asynchronously so we can't clone your fork straight away. Give it a few seconds then a 'pytoil checkout repo' will bring it down as normal. You can also ask pytoil to automatically create a virtual environment on checkout with the '--venv/-v' flag. This only happens for projects pulled down from GitHub to avoid accidentally screwing up local projects. If the '--venv/-v' flag is used, pytoil will look at your project to try and detect which type of environment to create (conda or standard python). More info can be found in the documentation. Examples: $ pytoil checkout my_project $ pytoil checkout my_project --venv $ pytoil checkout someoneelse/project Arguments: PROJECT Name of the project to checkout. [required] Options: -v, --venv Attempt to auto-create a virtual environment. --help Show this message and exit.","title":"Help"},{"location":"commands/checkout.html#local-project","text":"If the project is available locally, checkout will simply open it for you // Some project thats already local $ pytoil checkout my_local_project Project: 'my_local_project' found locally! Opening 'my_github_project' in VSCode...","title":"Local Project"},{"location":"commands/checkout.html#remote-project","text":"If pytoil can't find your project locally, checkout will: Clone it to your projects directory Open it for you (if you configure VSCode in config ) // Some project thats on GitHub $ pytoil checkout my_github_project Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Opening 'my_github_project' in VSCode... Why just VSCode? When developing pytoil I was debating how to handle this. I use VSCode for everything but I know other people have different editor preferences. Initially I looked at using the $EDITOR environment variable but working out how best to launch a variety of possible editors from a CLI was tricky. Plus pytoil does things like alter workspace settings to point at the right virtual environment, and I only know how to do this with VSCode. PR's are very welcome though if you think you can introduce support for your preferred editor!","title":"Remote Project"},{"location":"commands/checkout.html#someone-elses-project","text":"A common workflow in open source is to fork someone elses project and then work on your fork. With pytoil this can be done in the same command! If you provide the shorthand repo path to pytoil checkout e.g. someoneelse/repo , pytoil will fork the repo for you! // Someone else's project $ pytoil checkout someone/their_github_project Project: 'someone/their_github_project' belongs to 'someone'. Making you a fork. Done! Note: Forking happens asynchronously on GitHub which means it may not be available to clone right away Note As it says in the command line above, pytoil can't clone your fork right away because it happens in the background on GitHub's end which means when we get the 202: Accepted response from the API, there's no guarantee that your fork exists yet. The best bet is to give it a few seconds and then try checking it out as normal","title":"Someone else's project"},{"location":"commands/checkout.html#automatically-create-a-virtual-environment","text":"If you pass the --venv option, checkout will also: Try to detect what environment would work best for the project (conda or virtualenv) Auto create this virtual environment and install any configured common packages If you have VSCode configured, pytoil will also set your workspace python.defaultInterpreterPath Note From about version 1.57.1, VSCode have been deprecating the workspace setting python.pythonPath in favour of python.defaultInterpreterPath which up until v0.6.0, pytoil used as part of the whole \"automate your dev life\" thing! These settings do differ in their functionality, which you can read about here: https://github.com/microsoft/vscode-python/issues/12313 . But it turns out that because the only time we set this is when creating brand new projects, or checking out remote projects, these settings behave exactly the same for us, so it effectively represents a straight swap. // Some project thats on GitHub $ pytoil checkout my_github_project --venv Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Auto-creating correct virtual environment // Here you might see some conda or venv stuff Opening 'my_github_project' in VSCode... Note pytoil looks for certain files in your project (like setup.py , setup.cfg , environment.yml etc.) and that's how it decides which environment to create. If it isn't totally sure what environment to create, it will just skip this step and let you know!","title":"Automatically Create a Virtual Environment"},{"location":"commands/config.html","text":"Config \u00b6 The config subcommand is pytoil's programmatic access to it's own configuration file! Here you can get, set, show and get help about the configuration. Help \u00b6 $ pytoil config --help Usage: pytoil config [OPTIONS] COMMAND [ARGS]... Interact with pytoil's configuration. The config command group allows you to get, set, and show pytoil's configuration. Getting and showing obviously do not edit the config file ($HOME/.pytoil.yml). Setting a key value pair using the 'config set' subcommand will cause the config file to be updated and overwritten. You will be prompted to confirm this however. Currently the only config key you cannot set on the command line is 'common_packages'. If you want to change this, you'll have to do so in the config file itself. Options: --help Show this message and exit. Commands: get Get the currently set value for a config key. help Print a list and description of pytoil config keys. set Set a config key, value pair. show Show pytoil's config. Get \u00b6 get does what it says. It gets a valid config key-value pair from your file and shows it to you. Simple! $ pytoil config get vscode vscode: True Set \u00b6 set allows you to set a config key-value pair from the command line. This change will be saved to the config file, overwriting it, but only if you agree to the confirmation! $ pytoil config set projects_dir /Users/me/somewhereelse This will set 'projects_dir' to /Users/me/somewhereelse. Are you sure? [y/N]: y Config changed successfully! 'projects_dir' is now /Users/me/somewhereelse Tip You can again use the --force/-f flag here if you want to override the confirmation Note Pytoil uses pydantic under the hood to ensure the types of the values (e.g. bool, str, pathlib.Path etc.) are all handled properly so you basically can't go wrong! Warning The only config key you can't currently set via the command line is common_packages . This is to do with the way shells and CLI apps handle lists and I don't see an easy way to solve it! If you want to change this config setting, you will have to do it in the config file itself unfortunately Show \u00b6 show is just a handy way of seeing what the current config is without having to go to the config file! $ pytoil config show Pytoil Config: projects_dir: '/Users/you/Development' token: 'ljnbasbasbisyvo8' username: 'FollowTheProcess' vscode: True common_packages: ['black', 'mypy', 'isort', 'flake8'] init_on_new: True Help (The other help) \u00b6 This help ( pytoil config help not pytoil config --help ) outputs a (hopefully) helpful description of the pytoil configuration schema. $ pytoil config help ======================= The '.pytoil.yml' config file =======================\u001b - projects_dir (bool) The absolute path to where you keep your development projects (e.g. /Users/you/Projects) - token (str) Your GitHub personal access token. This must have a minimum of repo read access. See the documentation here: https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token Pytoil will try and get this from the config file initially, then fall back to the $GITHUB_TOKEN environment variable. If neither of these places are set, you will not be able to use pytoil commands that rely on the GitHub API. Pytoil will notify you of this when any of these commands are called. - username (str) Your GitHub username. - vscode (bool) Whether you want pytoil to open projects up using VSCode. This will happen on 'new' and 'checkout'. - common_packages (List[str]) A list of python package names to inject into every virtual environment pytoil creates (e.g. linters, formatters and other dev dependencies). - init_on_new (bool) Whether or not you want pytoil to create an empty git repo when you make a new project with 'pytoil new'. This can also be disabled on a per use basis using the '--no-git' flag.","title":"Config"},{"location":"commands/config.html#config","text":"The config subcommand is pytoil's programmatic access to it's own configuration file! Here you can get, set, show and get help about the configuration.","title":"Config"},{"location":"commands/config.html#help","text":"$ pytoil config --help Usage: pytoil config [OPTIONS] COMMAND [ARGS]... Interact with pytoil's configuration. The config command group allows you to get, set, and show pytoil's configuration. Getting and showing obviously do not edit the config file ($HOME/.pytoil.yml). Setting a key value pair using the 'config set' subcommand will cause the config file to be updated and overwritten. You will be prompted to confirm this however. Currently the only config key you cannot set on the command line is 'common_packages'. If you want to change this, you'll have to do so in the config file itself. Options: --help Show this message and exit. Commands: get Get the currently set value for a config key. help Print a list and description of pytoil config keys. set Set a config key, value pair. show Show pytoil's config.","title":"Help"},{"location":"commands/config.html#get","text":"get does what it says. It gets a valid config key-value pair from your file and shows it to you. Simple! $ pytoil config get vscode vscode: True","title":"Get"},{"location":"commands/config.html#set","text":"set allows you to set a config key-value pair from the command line. This change will be saved to the config file, overwriting it, but only if you agree to the confirmation! $ pytoil config set projects_dir /Users/me/somewhereelse This will set 'projects_dir' to /Users/me/somewhereelse. Are you sure? [y/N]: y Config changed successfully! 'projects_dir' is now /Users/me/somewhereelse Tip You can again use the --force/-f flag here if you want to override the confirmation Note Pytoil uses pydantic under the hood to ensure the types of the values (e.g. bool, str, pathlib.Path etc.) are all handled properly so you basically can't go wrong! Warning The only config key you can't currently set via the command line is common_packages . This is to do with the way shells and CLI apps handle lists and I don't see an easy way to solve it! If you want to change this config setting, you will have to do it in the config file itself unfortunately","title":"Set"},{"location":"commands/config.html#show","text":"show is just a handy way of seeing what the current config is without having to go to the config file! $ pytoil config show Pytoil Config: projects_dir: '/Users/you/Development' token: 'ljnbasbasbisyvo8' username: 'FollowTheProcess' vscode: True common_packages: ['black', 'mypy', 'isort', 'flake8'] init_on_new: True","title":"Show"},{"location":"commands/config.html#help-the-other-help","text":"This help ( pytoil config help not pytoil config --help ) outputs a (hopefully) helpful description of the pytoil configuration schema. $ pytoil config help ======================= The '.pytoil.yml' config file =======================\u001b - projects_dir (bool) The absolute path to where you keep your development projects (e.g. /Users/you/Projects) - token (str) Your GitHub personal access token. This must have a minimum of repo read access. See the documentation here: https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token Pytoil will try and get this from the config file initially, then fall back to the $GITHUB_TOKEN environment variable. If neither of these places are set, you will not be able to use pytoil commands that rely on the GitHub API. Pytoil will notify you of this when any of these commands are called. - username (str) Your GitHub username. - vscode (bool) Whether you want pytoil to open projects up using VSCode. This will happen on 'new' and 'checkout'. - common_packages (List[str]) A list of python package names to inject into every virtual environment pytoil creates (e.g. linters, formatters and other dev dependencies). - init_on_new (bool) Whether or not you want pytoil to create an empty git repo when you make a new project with 'pytoil new'. This can also be disabled on a per use basis using the '--no-git' flag.","title":"Help (The other help)"},{"location":"commands/gh.html","text":"gh \u00b6 Sometimes you just want to quickly go to the GitHub page for your project. Enter the incredibly simple gh command! $ pytoil gh my_project Opening 'my_project' in your browser... // Now you're at the GitHub page for the project!","title":"GH"},{"location":"commands/gh.html#gh","text":"Sometimes you just want to quickly go to the GitHub page for your project. Enter the incredibly simple gh command! $ pytoil gh my_project Opening 'my_project' in your browser... // Now you're at the GitHub page for the project!","title":"gh"},{"location":"commands/info.html","text":"Info \u00b6 Another easy one! info simply shows you some summary information about whatever project you tell it to. // Let's get some info about pytoil $ pytoil info pytoil Info for: pytoil name: pytoil description: CLI to automate the development workflow. created_at: 2021-02-04T15:05:23Z updated_at: 2021-03-02T11:09:08Z size: 219 license: Apache License 2.0 remote: True local: True What happens here is pytoil uses the GitHub personal access token we talked about in config and hits the GitHub API to find out some basic information about the repo you pass to it pytoil will always prefer this way of doing it as we can get things like license information and description which is a bit more helpful to show. If however, the project you're asking for information about does not exist on GitHub yet, you'll still get some info back! // Some project thats not on GitHub yet $ pytoil info my_local_project Info for: my_local_project name: my_local_project created_at: 2021-02-27 12:37:18 updated_at: 2021-02-27 12:48:18 size: 256 local: True remote: False Note pytoil grabs this data from your operating system by using the Path.stat() method from pathlib","title":"Info"},{"location":"commands/info.html#info","text":"Another easy one! info simply shows you some summary information about whatever project you tell it to. // Let's get some info about pytoil $ pytoil info pytoil Info for: pytoil name: pytoil description: CLI to automate the development workflow. created_at: 2021-02-04T15:05:23Z updated_at: 2021-03-02T11:09:08Z size: 219 license: Apache License 2.0 remote: True local: True What happens here is pytoil uses the GitHub personal access token we talked about in config and hits the GitHub API to find out some basic information about the repo you pass to it pytoil will always prefer this way of doing it as we can get things like license information and description which is a bit more helpful to show. If however, the project you're asking for information about does not exist on GitHub yet, you'll still get some info back! // Some project thats not on GitHub yet $ pytoil info my_local_project Info for: my_local_project name: my_local_project created_at: 2021-02-27 12:37:18 updated_at: 2021-02-27 12:48:18 size: 256 local: True remote: False Note pytoil grabs this data from your operating system by using the Path.stat() method from pathlib","title":"Info"},{"location":"commands/new.html","text":"New \u00b6 new will make you a new project locally. You have the option to create a new virtual environment with it and to create the project from a cookiecutter template Help \u00b6 $ pytoil new --help Usage: pytoil new [OPTIONS] PROJECT Create a new development project. Bare usage will simply create an empty folder in your configured projects directory. You can also create a project from a cookiecutter template by passing a valid url to the '--cookie/-c' flag. If you just want a very simple, language-specific starting template, use the '--starter/-s' option. By default, pytoil will initialise an empty git repo in the folder, following the style of modern language build tools such as rust's cargo. You can disable this behaviour by setting 'init_on_new' to false in pytoil's config file or by passing the '--no-git/-n' flag here. If you want pytoil to create a new virtual environment for your project, you can use the '--venv/-v' flag. Standard python and conda virtual environments are supported. If the '--venv/-v' flag is used, you may also pass a list of python packages to install into the created virtual environment. These will be delegated to the appropriate tool (pip or conda) depending on what environment was created. If the environment is conda, the packages will be passed at environment creation time meaning they will have their dependencies resolved together. Normal python environments will first be created and then have specified packages installed. If 'common_packages' is specified in pytoil's config file, these will automatically be included in the environment. To specify versions of packages via the command line, you must enclose them in double quotes e.g. \"flask>=1.0.0\" not flask>=1.0.0 otherwise this will be interpreted by the shell as a command redirection. Examples: $ pytoil new my_project $ pytoil new my_project --cookie https://github.com/some/cookie.git $ pytoil new my_project --venv conda $ pytoil new my_project -c https://github.com/some/cookie.git -v conda --no-git $ pytoil new my_project -v venv requests \"flask>=1.0.0\" $ pytoil new my_project --starter python Arguments: PROJECT Name of the project to create. [required] Options: -c, --cookie TEXT URL to a cookiecutter template repo from which to build the project. -s, --starter [python|go|rust|none] Use a language-specific starter template [default: none] -v, --venv [venv|conda|none] Which type of virtual environment to create for the project. [default: none] -n, --no-git Don't initialise an empty git repo in the app of the project. [default: False] --help Show this message and exit. No Options \u00b6 If you don't give any options, the default behaviour is to just make a new empty folder with no virtual environment for you to do whatever you want with! In this sense, you don't have to be a python developer to use pytoil! $ pytoil new my_new_project Creating new project: 'my_new_project' // Does some stuff... New Git Repo \u00b6 By default, pytoil will also create an empty git repository in this folder for you. You can disable this behaviour by changing the value for init_on_new in your config file, or on a per use basis by using the --no-git flag. You will need git installed to be able to use this feature. $ pytoil new my_new_project --no-git Creating new project: 'my_new_project' // Does some stuff...but not git Note A lot of modern language tools (e.g. rust's cargo ) initialise a git repo by default and I liked the idea so here it is Include Virtual Environment \u00b6 If you are a python developer though, chances are you'll want to create a virtual environment with your project. pytoil supports both venv and conda environments, although for the latter you'll have to have the conda package manager already installed on your system. I personally recommend miniconda as you get the package manager but none of the bundled packages (which can be quite large!). For standard python virtual environments, pytoil uses the standard library venv module so you don't need to install anything external. If you want to use conda environments though, you'll need to have a conda package manager installed and available on $PATH. Info If you don't know what conda is: as a general rule, you'll want to use venv on most python projects (particularly packages i.e. things that can be pip installed). If you do a lot of work with data (think pandas, numpy, scikit-learn) you'll probably want to use conda as a lot of python data tools include native C libraries which require compiling, and conda makes this happen seamlessly Pytoil has been tested and supports the following conda distributions: Anaconda Miniconda Miniforge Mambaforge All you have to do is specify which virtual environment to create, using the --venv/-v option flag. You can choose from venv or conda . The default is None . $ pytoil new my_new_project --venv venv Creating new project: 'my_new_project' Creating virtual environment for: 'my_new_project' Or with conda... $ pytoil new my_new_project --venv conda Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' // Conda environments typically take a bit longer to make as it has to do a bit more work! Install Packages at Creation \u00b6 A blank virtual environment isn't really much use yet! pytoil lets you inject packages at environment creation time! All you have to do is pass packages you want to install into the new environment as additional command line arguments and pytoil will figure this all out for you. $ pytoil new my_new_project --venv conda pandas numpy scikit-learn Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' Including packages: pandas, numpy, scikit-learn // Conda environments typically take a bit longer to make as it has to do a bit more work! Note This is also where the common_packages setting from the config file comes in! If you specify packages here, these will automatically get injected into every environment pytoil creates, whether its a python virtual environment or a conda environment. This is particularly useful for development dependencies like linters and formatters etc. Build a project from a Cookiecutter Template \u00b6 If you don't know what cookiecutter is, go and check them out! Essentially, it is a templating engine for development projects and, after asking you a few questions, it can dynamically insert and modify text inside your project, set up directory structure and all sorts of cool automation stuff! It means that if you find a template you like (or make your own) you can use it as the base for development projects without having to create so much boilerplate at the beginning, they're great Note In fact, pytoil was itself started from a cookiecutter template! Because I love cookiecutter so much, I built pytoil to support them easily. You can create a new project from a cookiecutter template by using the --cookie/-c flag like this: // Just pass a url to a cookiecutter template $ pytoil new my_new_project --cookie https://github.com/some/cookie.git Creating new project: 'my_new_project' from cookiecutter: 'https://github.com/some/cookie.git' Create from a starter \u00b6 pytoil also comes with a few basic starter templates for some common languages. How it creates these templates is specific to the language, but you can use them like this.... Here's a python one: // Just pass a valid starter $ pytoil new my_new_python_project --starter python Creating new project: 'my_new_python_project' from starter: 'python' And with go: // Just pass a valid starter $ pytoil new my_new_go_project --starter go Creating new project: 'my_new_go_project' from starter: 'go' Note Currently pytoil supports python, go and rust starter templates. The starters are super easy to implement though so if you want more languages supported, maybe throw us a PR The table below shows what happens under the hood when a starter is given to pytoil new : Starter Implementation python Creates everything internally using pathlib go Creates the root directory and main.go internally. Then calls go mod init rust Creates the root directory internally. Then calls cargo init All in One Go \u00b6 Because pytoil uses typer for it's CLI, the arguments and options to CLI commands are all resolved really intelligently so you can specify all of them in one go if you like to get complex behaviour! $ pytoil new my_new_project --cookie https://github.com/some/cookie.git --venv venv --no-git requests \"flask>=1.0.0\" sqlalchemy // Many things will now happen! In this snippet we've: Created a new project in the correct folder called 'my_new_project' Built this project from a cookiecutter template hosted on GitHub Created a fresh python virtual environment for the project Told pytoil not to initialise an empty git repo (it actually doesn't do this on cookiecutter projects anyway but you get the point) Passed a list of additional packages to install into the new environment (along with any we've specified in the config file) That's better than doing all this yourself isn't it!","title":"New"},{"location":"commands/new.html#new","text":"new will make you a new project locally. You have the option to create a new virtual environment with it and to create the project from a cookiecutter template","title":"New"},{"location":"commands/new.html#help","text":"$ pytoil new --help Usage: pytoil new [OPTIONS] PROJECT Create a new development project. Bare usage will simply create an empty folder in your configured projects directory. You can also create a project from a cookiecutter template by passing a valid url to the '--cookie/-c' flag. If you just want a very simple, language-specific starting template, use the '--starter/-s' option. By default, pytoil will initialise an empty git repo in the folder, following the style of modern language build tools such as rust's cargo. You can disable this behaviour by setting 'init_on_new' to false in pytoil's config file or by passing the '--no-git/-n' flag here. If you want pytoil to create a new virtual environment for your project, you can use the '--venv/-v' flag. Standard python and conda virtual environments are supported. If the '--venv/-v' flag is used, you may also pass a list of python packages to install into the created virtual environment. These will be delegated to the appropriate tool (pip or conda) depending on what environment was created. If the environment is conda, the packages will be passed at environment creation time meaning they will have their dependencies resolved together. Normal python environments will first be created and then have specified packages installed. If 'common_packages' is specified in pytoil's config file, these will automatically be included in the environment. To specify versions of packages via the command line, you must enclose them in double quotes e.g. \"flask>=1.0.0\" not flask>=1.0.0 otherwise this will be interpreted by the shell as a command redirection. Examples: $ pytoil new my_project $ pytoil new my_project --cookie https://github.com/some/cookie.git $ pytoil new my_project --venv conda $ pytoil new my_project -c https://github.com/some/cookie.git -v conda --no-git $ pytoil new my_project -v venv requests \"flask>=1.0.0\" $ pytoil new my_project --starter python Arguments: PROJECT Name of the project to create. [required] Options: -c, --cookie TEXT URL to a cookiecutter template repo from which to build the project. -s, --starter [python|go|rust|none] Use a language-specific starter template [default: none] -v, --venv [venv|conda|none] Which type of virtual environment to create for the project. [default: none] -n, --no-git Don't initialise an empty git repo in the app of the project. [default: False] --help Show this message and exit.","title":"Help"},{"location":"commands/new.html#no-options","text":"If you don't give any options, the default behaviour is to just make a new empty folder with no virtual environment for you to do whatever you want with! In this sense, you don't have to be a python developer to use pytoil! $ pytoil new my_new_project Creating new project: 'my_new_project' // Does some stuff...","title":"No Options"},{"location":"commands/new.html#new-git-repo","text":"By default, pytoil will also create an empty git repository in this folder for you. You can disable this behaviour by changing the value for init_on_new in your config file, or on a per use basis by using the --no-git flag. You will need git installed to be able to use this feature. $ pytoil new my_new_project --no-git Creating new project: 'my_new_project' // Does some stuff...but not git Note A lot of modern language tools (e.g. rust's cargo ) initialise a git repo by default and I liked the idea so here it is","title":"New Git Repo"},{"location":"commands/new.html#include-virtual-environment","text":"If you are a python developer though, chances are you'll want to create a virtual environment with your project. pytoil supports both venv and conda environments, although for the latter you'll have to have the conda package manager already installed on your system. I personally recommend miniconda as you get the package manager but none of the bundled packages (which can be quite large!). For standard python virtual environments, pytoil uses the standard library venv module so you don't need to install anything external. If you want to use conda environments though, you'll need to have a conda package manager installed and available on $PATH. Info If you don't know what conda is: as a general rule, you'll want to use venv on most python projects (particularly packages i.e. things that can be pip installed). If you do a lot of work with data (think pandas, numpy, scikit-learn) you'll probably want to use conda as a lot of python data tools include native C libraries which require compiling, and conda makes this happen seamlessly Pytoil has been tested and supports the following conda distributions: Anaconda Miniconda Miniforge Mambaforge All you have to do is specify which virtual environment to create, using the --venv/-v option flag. You can choose from venv or conda . The default is None . $ pytoil new my_new_project --venv venv Creating new project: 'my_new_project' Creating virtual environment for: 'my_new_project' Or with conda... $ pytoil new my_new_project --venv conda Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' // Conda environments typically take a bit longer to make as it has to do a bit more work!","title":"Include Virtual Environment"},{"location":"commands/new.html#install-packages-at-creation","text":"A blank virtual environment isn't really much use yet! pytoil lets you inject packages at environment creation time! All you have to do is pass packages you want to install into the new environment as additional command line arguments and pytoil will figure this all out for you. $ pytoil new my_new_project --venv conda pandas numpy scikit-learn Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' Including packages: pandas, numpy, scikit-learn // Conda environments typically take a bit longer to make as it has to do a bit more work! Note This is also where the common_packages setting from the config file comes in! If you specify packages here, these will automatically get injected into every environment pytoil creates, whether its a python virtual environment or a conda environment. This is particularly useful for development dependencies like linters and formatters etc.","title":"Install Packages at Creation"},{"location":"commands/new.html#build-a-project-from-a-cookiecutter-template","text":"If you don't know what cookiecutter is, go and check them out! Essentially, it is a templating engine for development projects and, after asking you a few questions, it can dynamically insert and modify text inside your project, set up directory structure and all sorts of cool automation stuff! It means that if you find a template you like (or make your own) you can use it as the base for development projects without having to create so much boilerplate at the beginning, they're great Note In fact, pytoil was itself started from a cookiecutter template! Because I love cookiecutter so much, I built pytoil to support them easily. You can create a new project from a cookiecutter template by using the --cookie/-c flag like this: // Just pass a url to a cookiecutter template $ pytoil new my_new_project --cookie https://github.com/some/cookie.git Creating new project: 'my_new_project' from cookiecutter: 'https://github.com/some/cookie.git'","title":"Build a project from a Cookiecutter Template"},{"location":"commands/new.html#create-from-a-starter","text":"pytoil also comes with a few basic starter templates for some common languages. How it creates these templates is specific to the language, but you can use them like this.... Here's a python one: // Just pass a valid starter $ pytoil new my_new_python_project --starter python Creating new project: 'my_new_python_project' from starter: 'python' And with go: // Just pass a valid starter $ pytoil new my_new_go_project --starter go Creating new project: 'my_new_go_project' from starter: 'go' Note Currently pytoil supports python, go and rust starter templates. The starters are super easy to implement though so if you want more languages supported, maybe throw us a PR The table below shows what happens under the hood when a starter is given to pytoil new : Starter Implementation python Creates everything internally using pathlib go Creates the root directory and main.go internally. Then calls go mod init rust Creates the root directory internally. Then calls cargo init","title":"Create from a starter"},{"location":"commands/new.html#all-in-one-go","text":"Because pytoil uses typer for it's CLI, the arguments and options to CLI commands are all resolved really intelligently so you can specify all of them in one go if you like to get complex behaviour! $ pytoil new my_new_project --cookie https://github.com/some/cookie.git --venv venv --no-git requests \"flask>=1.0.0\" sqlalchemy // Many things will now happen! In this snippet we've: Created a new project in the correct folder called 'my_new_project' Built this project from a cookiecutter template hosted on GitHub Created a fresh python virtual environment for the project Told pytoil not to initialise an empty git repo (it actually doesn't do this on cookiecutter projects anyway but you get the point) Passed a list of additional packages to install into the new environment (along with any we've specified in the config file) That's better than doing all this yourself isn't it!","title":"All in One Go"},{"location":"commands/pull.html","text":"Pull \u00b6 pull does exactly what it sounds like, it provides a nice easy way to pull down multiple projects at once and saves you having to type git clone like a million times Any projects you already have locally will be completely skipped by pull so it's impossible to overwrite any local changes to projects Help \u00b6 $ pytoil pull --help Usage: pytoil pull [OPTIONS] [PROJECTS]... Pull down your remote projects. The pull command provides easy methods for pulling down remote projects. It is effectively a nice wrapper around git clone but you don't have to worry about urls or what your cwd is, pull will grab your remote projects by name and clone them to your configured projects directory. You can also use pull to batch clone multiple repos, even all of them (\"-- all/-a\") if you're into that sorta thing. Any remote project that already exists locally will be skipped and none of your local projects are changed in any way. pytoil will only pull down those projects that don't already exist locally. It's very possible to accidentally clone a lot of repos when using pull so you will be prompted for confirmation before pytoil does anything. The \"--force/-f\" flag can be used to override this confirmation prompt if desired. Examples: $ pytoil pull project1 project2 project3 $ pytoil pull project1 project2 project3 --force $ pytoil pull --all $ pytoil pull --all --force Arguments: [PROJECTS]... Name of the project(s) to pull down. Options: -f, --force Force pull without confirmation. -a, --all Pull down all of your projects. --help Show this message and exit. All \u00b6 When you run pytoil pull --all pytoil will scan your projects directory and your GitHub repos to calculate what's missing locally and then go and grab the missing projects from GitHub one by one. $ pytoil pull --all # This will clone 7 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... Warning If you have lots of GitHub repos this could take a while, you might be better off selecting specific repos to pull by using pytoil pull [project(s)] . More on that down here However, it will prompt you telling you exactly how many repos it is going to clone and ask you to confirm! This confirmation can be disabled by using the --force/-f flag. $ pytoil pull --all // This person has a LOT of repos # This will clone 1375 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted! Some \u00b6 If you have a lot of repos or you only want a few of them, pytoil pull accepts a space separated list of projects as arguments. Doing it this way, it will again check if you already have any of these locally (and skip them if you do) and finally do the cloning. Like so: $ pytoil pull repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... And just like --all you can abort the whole operation by entering n when prompted. $ pytoil pull repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"Pull"},{"location":"commands/pull.html#pull","text":"pull does exactly what it sounds like, it provides a nice easy way to pull down multiple projects at once and saves you having to type git clone like a million times Any projects you already have locally will be completely skipped by pull so it's impossible to overwrite any local changes to projects","title":"Pull"},{"location":"commands/pull.html#help","text":"$ pytoil pull --help Usage: pytoil pull [OPTIONS] [PROJECTS]... Pull down your remote projects. The pull command provides easy methods for pulling down remote projects. It is effectively a nice wrapper around git clone but you don't have to worry about urls or what your cwd is, pull will grab your remote projects by name and clone them to your configured projects directory. You can also use pull to batch clone multiple repos, even all of them (\"-- all/-a\") if you're into that sorta thing. Any remote project that already exists locally will be skipped and none of your local projects are changed in any way. pytoil will only pull down those projects that don't already exist locally. It's very possible to accidentally clone a lot of repos when using pull so you will be prompted for confirmation before pytoil does anything. The \"--force/-f\" flag can be used to override this confirmation prompt if desired. Examples: $ pytoil pull project1 project2 project3 $ pytoil pull project1 project2 project3 --force $ pytoil pull --all $ pytoil pull --all --force Arguments: [PROJECTS]... Name of the project(s) to pull down. Options: -f, --force Force pull without confirmation. -a, --all Pull down all of your projects. --help Show this message and exit.","title":"Help"},{"location":"commands/pull.html#all","text":"When you run pytoil pull --all pytoil will scan your projects directory and your GitHub repos to calculate what's missing locally and then go and grab the missing projects from GitHub one by one. $ pytoil pull --all # This will clone 7 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... Warning If you have lots of GitHub repos this could take a while, you might be better off selecting specific repos to pull by using pytoil pull [project(s)] . More on that down here However, it will prompt you telling you exactly how many repos it is going to clone and ask you to confirm! This confirmation can be disabled by using the --force/-f flag. $ pytoil pull --all // This person has a LOT of repos # This will clone 1375 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"All"},{"location":"commands/pull.html#some","text":"If you have a lot of repos or you only want a few of them, pytoil pull accepts a space separated list of projects as arguments. Doing it this way, it will again check if you already have any of these locally (and skip them if you do) and finally do the cloning. Like so: $ pytoil pull repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... And just like --all you can abort the whole operation by entering n when prompted. $ pytoil pull repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"Some"},{"location":"commands/remove.html","text":"Remove \u00b6 This one is easy! remove does exactly what it says. It will recursively delete an entire project from your local projects directory. Since this is quite a destructive action, pytoil will prompt you to confirm before it does anything. If you say no, the entire process will be aborted and your project will be left alone! Warning The deletion of a project like this is irreversible. It does not send the folder to Trash, it simply erases it from all existence in the universe, so make sure you know what you're doing before saying yes! Don't Panic! Don't worry though, remove DOES NOT go near anything on your GitHub, only your local directories are affected by remove . pytoil only makes HTTP GET requests to the GitHub API so you couldn't even delete a repo if you wanted to, in fact you can't make any changes to any GitHub repo with pytoil whatsoever so you're completely safe! Help \u00b6 $ pytoil remove --help Usage: pytoil remove [OPTIONS] [PROJECTS]... Remove projects from your local filesystem. The remove command provides an easy interface for decluttering your local projects directory. You can selectively remove any number of projects by passing them as arguments or nuke the whole lot with \"--all/-a\" if you want. As with most programmatic deleting, the directories are deleted instantly and not sent to trash. As such, pytoil will prompt you for confirmation before doing anything. The \"--force/-f\" flag can be used to force deletion without the confirmation prompt. Use with caution! Examples: $ pytoil remove project1 project2 project3 $ pytoil remove project1 project2 project3 --force $ pytoil remove --all $ pytoil remove --all --force Arguments: [PROJECTS]... Name of the project(s) to delete. Options: -f, --force Force delete without confirmation. -a, --all Delete all of your local projects. --help Show this message and exit. Remove Individual Projects \u00b6 If you want to remove one or more specific projects, just pass them to remove as arguments. $ pytoil remove my_project my_other_project this_one_too # This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [ y/N ] :$ y Removing project: 'my_project'. Removing project: 'my_other_project'. Removing project: 'this_one_too' Done! And if you say no... $ pytoil remove my_project my_other_project this_one_too # This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [ y/N ] :$ n Aborted! Nuke your Projects Directory \u00b6 And if you've completely given up and decided you don't want to be a developer anymore (we've all been there), you can erase all your local projects: $ pytoil remove --all # This will remove ALL your projects. Are you okay? [ y/N ] :$ y Removing project: 'remove1'. Removing project: 'remove2'. Removing project: 'remove3'. Done! Force Deletion \u00b6 If you're really sure what you're doing, you can get around the confirmation prompt by using the --force/-f flag. $ pytoil remove project1 project2 --force Removing project: 'remove1'. Removing project: 'remove2'. Removing project: 'remove3'. Done!","title":"Remove"},{"location":"commands/remove.html#remove","text":"This one is easy! remove does exactly what it says. It will recursively delete an entire project from your local projects directory. Since this is quite a destructive action, pytoil will prompt you to confirm before it does anything. If you say no, the entire process will be aborted and your project will be left alone! Warning The deletion of a project like this is irreversible. It does not send the folder to Trash, it simply erases it from all existence in the universe, so make sure you know what you're doing before saying yes! Don't Panic! Don't worry though, remove DOES NOT go near anything on your GitHub, only your local directories are affected by remove . pytoil only makes HTTP GET requests to the GitHub API so you couldn't even delete a repo if you wanted to, in fact you can't make any changes to any GitHub repo with pytoil whatsoever so you're completely safe!","title":"Remove"},{"location":"commands/remove.html#help","text":"$ pytoil remove --help Usage: pytoil remove [OPTIONS] [PROJECTS]... Remove projects from your local filesystem. The remove command provides an easy interface for decluttering your local projects directory. You can selectively remove any number of projects by passing them as arguments or nuke the whole lot with \"--all/-a\" if you want. As with most programmatic deleting, the directories are deleted instantly and not sent to trash. As such, pytoil will prompt you for confirmation before doing anything. The \"--force/-f\" flag can be used to force deletion without the confirmation prompt. Use with caution! Examples: $ pytoil remove project1 project2 project3 $ pytoil remove project1 project2 project3 --force $ pytoil remove --all $ pytoil remove --all --force Arguments: [PROJECTS]... Name of the project(s) to delete. Options: -f, --force Force delete without confirmation. -a, --all Delete all of your local projects. --help Show this message and exit.","title":"Help"},{"location":"commands/remove.html#remove-individual-projects","text":"If you want to remove one or more specific projects, just pass them to remove as arguments. $ pytoil remove my_project my_other_project this_one_too # This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [ y/N ] :$ y Removing project: 'my_project'. Removing project: 'my_other_project'. Removing project: 'this_one_too' Done! And if you say no... $ pytoil remove my_project my_other_project this_one_too # This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [ y/N ] :$ n Aborted!","title":"Remove Individual Projects"},{"location":"commands/remove.html#nuke-your-projects-directory","text":"And if you've completely given up and decided you don't want to be a developer anymore (we've all been there), you can erase all your local projects: $ pytoil remove --all # This will remove ALL your projects. Are you okay? [ y/N ] :$ y Removing project: 'remove1'. Removing project: 'remove2'. Removing project: 'remove3'. Done!","title":"Nuke your Projects Directory"},{"location":"commands/remove.html#force-deletion","text":"If you're really sure what you're doing, you can get around the confirmation prompt by using the --force/-f flag. $ pytoil remove project1 project2 --force Removing project: 'remove1'. Removing project: 'remove2'. Removing project: 'remove3'. Done!","title":"Force Deletion"},{"location":"commands/show.html","text":"Show \u00b6 We've seen a hint at some pytoil commands but lets dive in properly. Let's look at how you can use pytoil to help you The first subcommand we will look at is pytoil show . show does what it says on the tin and provides a nice way of showing your local and remote projects. Note show always shows the projects in alphabetical order Let's start with the help... Help \u00b6 $ pytoil show --help Usage: pytoil show [OPTIONS] COMMAND [ARGS]... View your local/remote projects. The show command provides an easy way of listing of the projects you have locally in your configured development directory and/or of those you have on GitHub (known in pytoil-land as 'remote' projects). Local projects will be the names of subdirectories in your configured projects directory. The remote projects listed here will be those owned by you on GitHub. Options: --help Show this message and exit. Commands: all Show all your projects, grouped by local and remote. diff Show the difference in local/remote projects. local Show your local projects. remote Show your remote projects. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil show local --help All \u00b6 all will show you... well all of your projects, separated by whether they are local (already available on your computer) or remote (on your GitHub, may or may not also be local). $ pytoil show all Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote Projects: - Cloned1 - Cloned2 - Remote1 Note In this snippet, the user has already cloned Cloned1 and Cloned2 so they show up in both sections. If you want to only show remote projects that you don't have locally, you need the diff command. Keep scrolling Local \u00b6 local shows all the projects you already have in your configured projects directory (see config for how to set this!). If you don't have any local projects yet, pytoil will let you know. $ pytoil show local Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote \u00b6 remote shows all the projects on your GitHub (you may or may not have some of these locally too). If you don't have any remote projects yet, pytoil will let you know. $ pytoil show remote Remote Projects: - Cloned1 - Cloned2 - Remote1 Diff \u00b6 diff shows all the projects you have on GitHub, but don't yet exist locally. If your local projects folder has all your GitHub projects in it, pytoil will let you know this too. $ pytoil show diff Diff: Remote - Local - Remote1 - etc... Count \u00b6 Every show subcommand has a --count/-c flag which, if used, will simply show you a count of the projects in that category. For example: $ pytoil show all --count Local Projects: You have 6 local projects. 27.27% of total. Remote Projects: You have 16 remote projects. 72.73% of total.","title":"Show"},{"location":"commands/show.html#show","text":"We've seen a hint at some pytoil commands but lets dive in properly. Let's look at how you can use pytoil to help you The first subcommand we will look at is pytoil show . show does what it says on the tin and provides a nice way of showing your local and remote projects. Note show always shows the projects in alphabetical order Let's start with the help...","title":"Show"},{"location":"commands/show.html#help","text":"$ pytoil show --help Usage: pytoil show [OPTIONS] COMMAND [ARGS]... View your local/remote projects. The show command provides an easy way of listing of the projects you have locally in your configured development directory and/or of those you have on GitHub (known in pytoil-land as 'remote' projects). Local projects will be the names of subdirectories in your configured projects directory. The remote projects listed here will be those owned by you on GitHub. Options: --help Show this message and exit. Commands: all Show all your projects, grouped by local and remote. diff Show the difference in local/remote projects. local Show your local projects. remote Show your remote projects. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil show local --help","title":"Help"},{"location":"commands/show.html#all","text":"all will show you... well all of your projects, separated by whether they are local (already available on your computer) or remote (on your GitHub, may or may not also be local). $ pytoil show all Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote Projects: - Cloned1 - Cloned2 - Remote1 Note In this snippet, the user has already cloned Cloned1 and Cloned2 so they show up in both sections. If you want to only show remote projects that you don't have locally, you need the diff command. Keep scrolling","title":"All"},{"location":"commands/show.html#local","text":"local shows all the projects you already have in your configured projects directory (see config for how to set this!). If you don't have any local projects yet, pytoil will let you know. $ pytoil show local Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2","title":"Local"},{"location":"commands/show.html#remote","text":"remote shows all the projects on your GitHub (you may or may not have some of these locally too). If you don't have any remote projects yet, pytoil will let you know. $ pytoil show remote Remote Projects: - Cloned1 - Cloned2 - Remote1","title":"Remote"},{"location":"commands/show.html#diff","text":"diff shows all the projects you have on GitHub, but don't yet exist locally. If your local projects folder has all your GitHub projects in it, pytoil will let you know this too. $ pytoil show diff Diff: Remote - Local - Remote1 - etc...","title":"Diff"},{"location":"commands/show.html#count","text":"Every show subcommand has a --count/-c flag which, if used, will simply show you a count of the projects in that category. For example: $ pytoil show all --count Local Projects: You have 6 local projects. 27.27% of total. Remote Projects: You have 16 remote projects. 72.73% of total.","title":"Count"}]}