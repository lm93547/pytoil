{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"pytoil is a small, helpful CLI to help developers manage their local and remote projects with ease! Source Code : https://github.com/FollowTheProcess/pytoil Documentation : https://FollowTheProcess.github.io/pytoil/ What is it? \u00b6 pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It's primarily aimed at python developers but you could easily use it to manage any project! pytoil is: Easy to use Easy to configure Safe (it won't edit your repos at all) Useful! (I hope ) Say goodbye to janky bash scripts Background \u00b6 Like many developers I suspect, I quickly became bored of typing repeated commands to manage my projects, create virtual environments, install packages, fire off cURL snippets to check if I had a certain repo etc. So I wrote some shell functions to do some of this for me... And these shell functions grew and grew and grew. Until one day I saw that the file I kept these functions in was over 1000 lines of bash (a lot of printf 's so it wasn't all logic but still). And 1000 lines of bash is waaaay too much! And because I'd basically hacked it all together, it was very fragile. If a part of a function failed, it would just carry on and wreak havoc! I'd have to do rm -rf all_my_projects ... I mean careful forensic investigation to fix it. So I decided to make a robust CLI with the proper error handling and testability of python, and here it is! Installation \u00b6 As pytoil is a CLI program, I'd recommend installing with pipx $ pipx install pytoil ---> 100% Successfully installed pytoil If you don't know what pipx is, go check it out! But basically it allows python CLI tools to be installed in their own sandboxed environments but you can still access the CLI as if it was installed globally! You can always fall back to pip $ python3 -m pip install pytoil ---> 100% Successfully installed pytoil Warning keep in mind though, you'll have to install it globally for it to work so it might be better to use pipx pytoil will install everything it needs in python to work. However, it's full feature set can only be accessed if you have the following external dependencies: git conda (if you work with conda environments) VSCode (if you want to use pytoil to automatically open your projects for you) Quickstart \u00b6 pytoil is super easy to get started with. After installation just run $ pytoil init # GitHub username:$ YourGitHubUsername # GitHub personal access token:$ YourTokenHere # Absolute path to your projects directory:$ /Users/you/projects # Use VSCode to open projects?:$ True This will create a config file which can be found at ~/.pytoil.yml , and will walk you through setting the tool up. Don't worry though, there's only a few options to configure! After that you're good to go! You can do things like: See your local and remote projects \u00b6 $ pytoil show all Local Projects: - Project1 - Project2 - Project3 Remote Projects: - Remote1 - Remote2 - etc.. See which ones you have on GitHub, but not on your computer \u00b6 $ pytoil show diff Remote projects that are not local: - Projectyoudonthave1 - Projectyoudonthave2 Easily grab a project, regardless of where it is \u00b6 $ pytoil project checkout myproject Resuming 'myproject'... // Will now either open that project if local // or clone it if not // Ensure virtual environments are set up etc. Create a new project and virtual environment in one go \u00b6 $ pytoil project create myproject --venv virtualenv Creating project: 'myproject' at '/Users/you/projects/myproject' Creating virtualenv for: 'myproject' And even do this from a cookiecutter template \u00b6 $ pytoil project create myproject --venv virtualenv --cookie https://github.com/some/cookie.git Creating project: 'myproject' with cookiecutter template: 'https://github.com/some/cookie.git' // You'll then be asked all the cookiecutter questions defined in the template // After which pytoil will take over and create the virtual environment as normal Help \u00b6 Like all good CLI programs, pytoil (aswell as all it's subcommands, and all their subcommands!) has a --help option to show you what to do. $ pytoil --help Usage: pytoil [OPTIONS] COMMAND [ARGS]... Helpful CLI to automate the development workflow. - Create and manage your local and remote projects - Build projects from cookiecutter templates. - Easily create/manage virtual environments. - Minimal configuration required. Options: -V, --version Display pytoil version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: config Interact with pytoil's configuration. init Initialise pytoil. project Operate on a specific project. show View your local/remote projects. sync Synchronise your local and remote projects. Info pytoil's CLI is designed such that if you don't specify any arguments, it won't do anything! just show you the --help . This is called being a 'well behaved' unix command line tool. This is true for any subcommand of pytoil so you won't accidently break anything if you don't specify arguments .","title":"Home"},{"location":"index.html#what-is-it","text":"pytoil is a handy tool that helps you stay on top of all your projects, remote or local. It's primarily aimed at python developers but you could easily use it to manage any project! pytoil is: Easy to use Easy to configure Safe (it won't edit your repos at all) Useful! (I hope ) Say goodbye to janky bash scripts","title":"What is it?"},{"location":"index.html#background","text":"Like many developers I suspect, I quickly became bored of typing repeated commands to manage my projects, create virtual environments, install packages, fire off cURL snippets to check if I had a certain repo etc. So I wrote some shell functions to do some of this for me... And these shell functions grew and grew and grew. Until one day I saw that the file I kept these functions in was over 1000 lines of bash (a lot of printf 's so it wasn't all logic but still). And 1000 lines of bash is waaaay too much! And because I'd basically hacked it all together, it was very fragile. If a part of a function failed, it would just carry on and wreak havoc! I'd have to do rm -rf all_my_projects ... I mean careful forensic investigation to fix it. So I decided to make a robust CLI with the proper error handling and testability of python, and here it is!","title":"Background"},{"location":"index.html#installation","text":"As pytoil is a CLI program, I'd recommend installing with pipx $ pipx install pytoil ---> 100% Successfully installed pytoil If you don't know what pipx is, go check it out! But basically it allows python CLI tools to be installed in their own sandboxed environments but you can still access the CLI as if it was installed globally! You can always fall back to pip $ python3 -m pip install pytoil ---> 100% Successfully installed pytoil Warning keep in mind though, you'll have to install it globally for it to work so it might be better to use pipx pytoil will install everything it needs in python to work. However, it's full feature set can only be accessed if you have the following external dependencies: git conda (if you work with conda environments) VSCode (if you want to use pytoil to automatically open your projects for you)","title":"Installation"},{"location":"index.html#quickstart","text":"pytoil is super easy to get started with. After installation just run $ pytoil init # GitHub username:$ YourGitHubUsername # GitHub personal access token:$ YourTokenHere # Absolute path to your projects directory:$ /Users/you/projects # Use VSCode to open projects?:$ True This will create a config file which can be found at ~/.pytoil.yml , and will walk you through setting the tool up. Don't worry though, there's only a few options to configure! After that you're good to go! You can do things like:","title":"Quickstart"},{"location":"index.html#see-your-local-and-remote-projects","text":"$ pytoil show all Local Projects: - Project1 - Project2 - Project3 Remote Projects: - Remote1 - Remote2 - etc..","title":"See your local and remote projects"},{"location":"index.html#see-which-ones-you-have-on-github-but-not-on-your-computer","text":"$ pytoil show diff Remote projects that are not local: - Projectyoudonthave1 - Projectyoudonthave2","title":"See which ones you have on GitHub, but not on your computer"},{"location":"index.html#easily-grab-a-project-regardless-of-where-it-is","text":"$ pytoil project checkout myproject Resuming 'myproject'... // Will now either open that project if local // or clone it if not // Ensure virtual environments are set up etc.","title":"Easily grab a project, regardless of where it is"},{"location":"index.html#create-a-new-project-and-virtual-environment-in-one-go","text":"$ pytoil project create myproject --venv virtualenv Creating project: 'myproject' at '/Users/you/projects/myproject' Creating virtualenv for: 'myproject'","title":"Create a new project and virtual environment in one go"},{"location":"index.html#and-even-do-this-from-a-cookiecutter-template","text":"$ pytoil project create myproject --venv virtualenv --cookie https://github.com/some/cookie.git Creating project: 'myproject' with cookiecutter template: 'https://github.com/some/cookie.git' // You'll then be asked all the cookiecutter questions defined in the template // After which pytoil will take over and create the virtual environment as normal","title":"And even do this from a cookiecutter template"},{"location":"index.html#help","text":"Like all good CLI programs, pytoil (aswell as all it's subcommands, and all their subcommands!) has a --help option to show you what to do. $ pytoil --help Usage: pytoil [OPTIONS] COMMAND [ARGS]... Helpful CLI to automate the development workflow. - Create and manage your local and remote projects - Build projects from cookiecutter templates. - Easily create/manage virtual environments. - Minimal configuration required. Options: -V, --version Display pytoil version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: config Interact with pytoil's configuration. init Initialise pytoil. project Operate on a specific project. show View your local/remote projects. sync Synchronise your local and remote projects. Info pytoil's CLI is designed such that if you don't specify any arguments, it won't do anything! just show you the --help . This is called being a 'well behaved' unix command line tool. This is true for any subcommand of pytoil so you won't accidently break anything if you don't specify arguments .","title":"Help"},{"location":"changelog.html","text":"Changelog \u00b6 0.1.0 \u00b6 First release.","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#010","text":"First release.","title":"0.1.0"},{"location":"config.html","text":"Config \u00b6 There's really not much to configure, all pytoil needs to know about is: Where you keep your projects ( projects_dir ) What your GitHub username is ( username ) Your GitHub personal access token ( token ) Whether you want pytoil to open things in VSCode ( vscode ) If you don't know how to generate a GitHub token, check out the docs . Info Don't worry about giving pytoil your personal token. All we do with it is make HTTP GET requests to the GitHub API using your token to authenticate the requests so we can tell which repos you have on GitHub and some very basic information about them. In fact, the only permissions pytoil needs is read repo access! Note I used VSCode as the only configurable editor as it's the one I use and is therefore the only one I have experience with configuring programmatically and launching via the command line. If you want to help add support for more editors then PR's are always welcome! The Config File \u00b6 After you install pytoil, you should run the following command and follow the prompts $ pytoil init # GitHub username:$ YourGitHubUsername # GitHub personal access token:$ YourTokenHere # Absolute path to your projects directory:$ /Users/you/projects # Use VSCode to open projects with?:$ True pytoil will then will write that config to a file: ~/.pytoil.yml . Note You only need to run this command once on initial setup (or if you delete the config file). After that your config is saved. You could always just edit the file manually if you like, it will look like this: # ~/.pytoil.yml username : \"FollowTheProcess\" projects_dir : \"/Users/me/projects\" token : \"thisismygithubtoken\" vscode : True Warning The only thing that might trip you up is that projects_dir must be the absolute path to where you keep your projects. So you'll need to explicitly state the entire path (as in the example above) starting from the root. Control using pytoil \u00b6 Of course, even after you've run pytoil init you can still easily get and set the config through the pytoil config subcommand. View Current Config \u00b6 $ pytoil config show Current pytoil config: username: 'YourUsername' token: 'YourToken' projects_dir: '/Users/you/projects' vscode: True Set a Config Value \u00b6 $ pytoil config set username mynewusername Configuration updated: 'username' is now 'mynewusername'.","title":"Config"},{"location":"config.html#config","text":"There's really not much to configure, all pytoil needs to know about is: Where you keep your projects ( projects_dir ) What your GitHub username is ( username ) Your GitHub personal access token ( token ) Whether you want pytoil to open things in VSCode ( vscode ) If you don't know how to generate a GitHub token, check out the docs . Info Don't worry about giving pytoil your personal token. All we do with it is make HTTP GET requests to the GitHub API using your token to authenticate the requests so we can tell which repos you have on GitHub and some very basic information about them. In fact, the only permissions pytoil needs is read repo access! Note I used VSCode as the only configurable editor as it's the one I use and is therefore the only one I have experience with configuring programmatically and launching via the command line. If you want to help add support for more editors then PR's are always welcome!","title":"Config"},{"location":"config.html#the-config-file","text":"After you install pytoil, you should run the following command and follow the prompts $ pytoil init # GitHub username:$ YourGitHubUsername # GitHub personal access token:$ YourTokenHere # Absolute path to your projects directory:$ /Users/you/projects # Use VSCode to open projects with?:$ True pytoil will then will write that config to a file: ~/.pytoil.yml . Note You only need to run this command once on initial setup (or if you delete the config file). After that your config is saved. You could always just edit the file manually if you like, it will look like this: # ~/.pytoil.yml username : \"FollowTheProcess\" projects_dir : \"/Users/me/projects\" token : \"thisismygithubtoken\" vscode : True Warning The only thing that might trip you up is that projects_dir must be the absolute path to where you keep your projects. So you'll need to explicitly state the entire path (as in the example above) starting from the root.","title":"The Config File"},{"location":"config.html#control-using-pytoil","text":"Of course, even after you've run pytoil init you can still easily get and set the config through the pytoil config subcommand.","title":"Control using pytoil"},{"location":"config.html#view-current-config","text":"$ pytoil config show Current pytoil config: username: 'YourUsername' token: 'YourToken' projects_dir: '/Users/you/projects' vscode: True","title":"View Current Config"},{"location":"config.html#set-a-config-value","text":"$ pytoil config set username mynewusername Configuration updated: 'username' is now 'mynewusername'.","title":"Set a Config Value"},{"location":"contributing.html","text":"Contributing to pytoil \u00b6 I've tried to structure pytoil to make it nice and easy for people to contribute. Here's how to go about doing it! Developing \u00b6 If you want to fix a bug, improve the docs, add tests, add a feature or any other type of direct contribution to pytoil: here's how you do it! To work on pytoil you'll need python >=3.8 Step 1: Fork pytoil \u00b6 The first thing to do is 'fork' pytoil. This will put a version of it on your GitHub page. This means you can change that fork all you want and the actual version of pytoil still works! To create a fork, go to the pytoil repo and click on the fork button! Step 2: Clone your fork \u00b6 Navigate to where you do your development work on your machine and open a terminal If you use HTTPS: git clone https://github.com/<your_github_username>/pytoil.git If you use SSH: git clone git@github.com:<your_github_username>/pytoil.git Or you can be really fancy and use the GH CLI gh repo clone <your_github_username>/pytoil HTTPS is probably the one most people use! Once you've cloned the project, cd into it... cd pytoil This will take you into the root directory of the project. Now add the original pytoil repo as an upstream in your forked project: git remote add upstream https://github.com/FollowTheProcess/pytoil.git This makes the original version of pytoil 'upstream' but not 'origin'. Basically, this means that if your working on it for a while and the original project has changed in the meantime, you can do: git checkout main git fetch upstream git merge upstream/main git push origin main This will (in order): Checkout the main branch of your locally cloned fork Fetch any changes from the original project that have happened since you forked it Merge those changes in with what you have Push those changes up to your fork so your fork stays up to date with the original. Good practice is to do this before you start doing anything every time you start work, then the chances of you getting conflicting commits later on is much lower! Step 3: Create the Environment \u00b6 pytoil uses poetry to manage development so first make sure you have that installed, see here . Poetry makes setting up pytoil super easy once it's installed... poetry install This will create a virtual environment for you, install pytoil's dependencies, and install pytoil itself in editable mode so you can work on it! Note By default, poetry will store the virtual environments in a special directory it controls. My preference is to have the virtual environments inside the project directory itself. You can do this by running: poetry config virtualenvs.in_project true Step 5: Do your thing \u00b6 Always checkout a new branch before changing anything git checkout -b <name-of-your-bugfix-or-feature> So if I was going to fix a bug with the yield strength calculation I would do something like: git checkout -b yield-strength-bugfix Now you're ready to start working! Remember! pytoil aims for high test coverage. If you implement a new feature, make sure to write tests for it! Similarly, if you fix a bug, it's good practice to write a test that would have caught that bug so we can be sure it doesn't reappear in the future! pytoil uses nox for automated testing, building the docs, formatting and linting etc. So when you've made your changes, just run: nox And it will tell you if something's wrong! Step 6: Commit your changes \u00b6 Once you're happy with what you've done, add the files you've changed: git add <changed-file ( s ) > # Might be easier to do git add -A # But be wary of this and check what it's added is what you wanted.. git status Commit your changes: git commit # Now write a good commit message explaining what you've done and why. While you were working on your changes, the original project might have changed (due to other people working on it). So first, you should rebase your current branch from the upstream destination. Doing this means that when you do your PR, it's all compatible: git pull --rebase upstream main Now push your changes to your fork: git push origin <your-branch-name> Step 7: Create a Pull Request \u00b6 Now go to the original pytoil repo and create a Pull Request. Make sure to choose upstream repo \"main\" as the destination branch and your forked repo \"your-branch-name\" as the source. Thats it! Your code will be tested automatically by pytoil's CI suite and if everything passes and your PR is approved and merged then it will become part of pytoil! Note: There is a good guide to open source contribution workflow here and also here too Contributing to Docs \u00b6 Any improvements to the documentation are always appreciated! pytoil uses mkdocs with the mkdocs-material theme so the documentation is all written in markdown and can be found in the docs folder in the project root. Because pytoil uses nox , things like building and serving the documentation is super easy. All you have to do is: # Builds the docs nox -s docs # Or again, the makefile make docs # Builds and serves to localhost nox -s docs -- serve # makefile equivalent make autodocs If you use the serve option, you can navigate to the localhost IP address it gives you and as you make changes to the source files, it will automatically reload your browser! Automation is power! If you add pages to the docs, make sure they are placed in the nav tree in the mkdocs.yml file and you're good to go! Note There is also a makefile with some handy tasks built in if you want to run them quickly. Things like make test and make docs . But you'll have to have the virtual environment activated to run these!","title":"Contributing"},{"location":"contributing.html#contributing-to-pytoil","text":"I've tried to structure pytoil to make it nice and easy for people to contribute. Here's how to go about doing it!","title":"Contributing to pytoil"},{"location":"contributing.html#developing","text":"If you want to fix a bug, improve the docs, add tests, add a feature or any other type of direct contribution to pytoil: here's how you do it! To work on pytoil you'll need python >=3.8","title":"Developing"},{"location":"contributing.html#step-1-fork-pytoil","text":"The first thing to do is 'fork' pytoil. This will put a version of it on your GitHub page. This means you can change that fork all you want and the actual version of pytoil still works! To create a fork, go to the pytoil repo and click on the fork button!","title":"Step 1: Fork pytoil"},{"location":"contributing.html#step-2-clone-your-fork","text":"Navigate to where you do your development work on your machine and open a terminal If you use HTTPS: git clone https://github.com/<your_github_username>/pytoil.git If you use SSH: git clone git@github.com:<your_github_username>/pytoil.git Or you can be really fancy and use the GH CLI gh repo clone <your_github_username>/pytoil HTTPS is probably the one most people use! Once you've cloned the project, cd into it... cd pytoil This will take you into the root directory of the project. Now add the original pytoil repo as an upstream in your forked project: git remote add upstream https://github.com/FollowTheProcess/pytoil.git This makes the original version of pytoil 'upstream' but not 'origin'. Basically, this means that if your working on it for a while and the original project has changed in the meantime, you can do: git checkout main git fetch upstream git merge upstream/main git push origin main This will (in order): Checkout the main branch of your locally cloned fork Fetch any changes from the original project that have happened since you forked it Merge those changes in with what you have Push those changes up to your fork so your fork stays up to date with the original. Good practice is to do this before you start doing anything every time you start work, then the chances of you getting conflicting commits later on is much lower!","title":"Step 2: Clone your fork"},{"location":"contributing.html#step-3-create-the-environment","text":"pytoil uses poetry to manage development so first make sure you have that installed, see here . Poetry makes setting up pytoil super easy once it's installed... poetry install This will create a virtual environment for you, install pytoil's dependencies, and install pytoil itself in editable mode so you can work on it! Note By default, poetry will store the virtual environments in a special directory it controls. My preference is to have the virtual environments inside the project directory itself. You can do this by running: poetry config virtualenvs.in_project true","title":"Step 3: Create the Environment"},{"location":"contributing.html#step-5-do-your-thing","text":"Always checkout a new branch before changing anything git checkout -b <name-of-your-bugfix-or-feature> So if I was going to fix a bug with the yield strength calculation I would do something like: git checkout -b yield-strength-bugfix Now you're ready to start working! Remember! pytoil aims for high test coverage. If you implement a new feature, make sure to write tests for it! Similarly, if you fix a bug, it's good practice to write a test that would have caught that bug so we can be sure it doesn't reappear in the future! pytoil uses nox for automated testing, building the docs, formatting and linting etc. So when you've made your changes, just run: nox And it will tell you if something's wrong!","title":"Step 5: Do your thing"},{"location":"contributing.html#step-6-commit-your-changes","text":"Once you're happy with what you've done, add the files you've changed: git add <changed-file ( s ) > # Might be easier to do git add -A # But be wary of this and check what it's added is what you wanted.. git status Commit your changes: git commit # Now write a good commit message explaining what you've done and why. While you were working on your changes, the original project might have changed (due to other people working on it). So first, you should rebase your current branch from the upstream destination. Doing this means that when you do your PR, it's all compatible: git pull --rebase upstream main Now push your changes to your fork: git push origin <your-branch-name>","title":"Step 6: Commit your changes"},{"location":"contributing.html#step-7-create-a-pull-request","text":"Now go to the original pytoil repo and create a Pull Request. Make sure to choose upstream repo \"main\" as the destination branch and your forked repo \"your-branch-name\" as the source. Thats it! Your code will be tested automatically by pytoil's CI suite and if everything passes and your PR is approved and merged then it will become part of pytoil! Note: There is a good guide to open source contribution workflow here and also here too","title":"Step 7: Create a Pull Request"},{"location":"contributing.html#contributing-to-docs","text":"Any improvements to the documentation are always appreciated! pytoil uses mkdocs with the mkdocs-material theme so the documentation is all written in markdown and can be found in the docs folder in the project root. Because pytoil uses nox , things like building and serving the documentation is super easy. All you have to do is: # Builds the docs nox -s docs # Or again, the makefile make docs # Builds and serves to localhost nox -s docs -- serve # makefile equivalent make autodocs If you use the serve option, you can navigate to the localhost IP address it gives you and as you make changes to the source files, it will automatically reload your browser! Automation is power! If you add pages to the docs, make sure they are placed in the nav tree in the mkdocs.yml file and you're good to go! Note There is also a makefile with some handy tasks built in if you want to run them quickly. Things like make test and make docs . But you'll have to have the virtual environment activated to run these!","title":"Contributing to Docs"},{"location":"commands/project.html","text":"Project \u00b6 Now let's look at the project subcommand. This is the biggest subcommand in pytoil and probably the part you'll interact with the most. Again, we'll start with the help. Help \u00b6 $ pytoil project --help Usage: pytoil project [OPTIONS] COMMAND [ARGS]... Operate on a specific project. Set the \"projects_dir\" key in the config to control where this command looks on your local file system. Set the \"token\" key in the config to give pytoil access to your GitHub via the API. We only make GET requests, your repos are safe with pytoil! Options: --help Show this message and exit. Commands: checkout Checkout a development project, either locally or from GitHub. create Create a new development project locally. info Show useful information about a project. remove Deletes a project from your local filesystem. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil project create --help Create \u00b6 create will make you a new project locally. You have the option to create a new virtual environment with it and to create the project from a cookiecutter template No Options \u00b6 If you don't give any options, the default behaviour is to just make a new empty folder with no virtual environment for you to do whatever you want with! In this sense, you don't have to be a python developer to use pytoil! $ pytoil project create my_new_project Creating new project: 'my_new_project' // Does some stuff... Include Virtual Environment \u00b6 If you are a python developer though, chances are you'll want to create a virtual environment with your project. pytoil supports both virtualenv and conda environments, although for the latter you'll have to have the conda package manager already installed on your system. I personally recommend miniconda as you get the package manager but none of the bundled packages (which can be quite large!). Info If you don't know what conda is: as a general rule, you'll want to use virtualenv on most python projects (particularly packages i.e. things that can be pip installed). If you do a lot of work with data (think pandas, numpy, scikit-learn) you'll probably want to use conda as a lot of python data tools include native C libraries which require compiling, and conda makes this happen seamlessly All you have to do is specify which virtual environment to create, using the --venv/-v option flag. You can choose from virtualenv or conda . The default is None . $ pytoil project create my_new_project --venv virtualenv Creating new project: 'my_new_project' Creating virtualenv for: 'my_new_project' Or with conda... $ pytoil project create my_new_project --venv conda Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' // Conda environments typically take a bit longer to make as it has to do a bit more work! Build a project from a Cookiecutter Template \u00b6 If you don't know what cookiecutter is, go and check them out! Essentially, it is a templating engine for development projects and, after asking you a few questions, it can dynamically insert and modify text inside your project, set up directory structure and all sorts of cool automation stuff! It means that if you find a template you like (or make your own) you can use it as the base for development projects without having to create so much boilerplate at the beginning, they're great Note In fact, pytoil was itself started from a cookiecutter template! Because I love cookiecutter so much, I built pytoil to support them easily. You can create a new project from a cookiecutter template by using the --cookie/-c flag like this: // Just pass a url to a cookiecutter template $ pytoil project create my_new_project --cookie https://github.com/some/cookie.git Creating new project: 'my_new_project' from cookiecutter: 'https://github.com/some/cookie.git' Info \u00b6 This one's easy! info simply shows you some summary information about whatever project you tell it to. // Let's get some info about pytoil $ pytoil project info pytoil Info for: pytoil name: pytoil description: CLI to automate the development workflow. created_at: 2021-02-04T15:05:23Z updated_at: 2021-03-02T11:09:08Z size: 219 license: Apache License 2.0 remote: True local: True What happens here is pytoil uses the GitHub personal access token we talked about in config and hits the GitHub API to find out some basic information about the repo you pass to it pytoil will always prefer this way of doing it as we can get things like license information and description which is a bit more helpful to show. If however, the project you're asking for information about does not exist on GitHub yet, you'll still get some info back! // Some project thats not on GitHub yet $ pytoil project info my_local_project Info for: my_local_project name: my_local_project created_at: 2021-02-27 12:37:18 updated_at: 2021-02-27 12:48:18 size: 256 local: True remote: False Note pytoil grabs this data from your operating system by using the Path.stat() method from pathlib Checkout \u00b6 checkout (not to be confused with git checkout ) allows to easily resume work on an ongoing development project. If the project is available locally, checkout will simply open it for you // Some project thats already local $ pytoil project checkout my_local_project Project: 'my_local_project' found locally! Opening 'my_github_project' in VSCode... If not, checkout will: Clone it to your projects directory Detect what type of project it is (conda or virtualenv) Create the required virtual environment for you automatically Open it for you (if you configure VSCode in config ) // Some project thats on GitHub $ pytoil project checkout my_github_project Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Auto-creating correct virtual environment // Here you might see some conda or virtualenv stuff Opening 'my_github_project' in VSCode... Why just VSCode? When developing pytoil I was debating how to handle this. I use VSCode for everything but I know other people have different editor preferences. Initially I looked at using the $EDITOR environment variable but working out how best to launch a variety of possible editors from a CLI was tricky. Plus pytoil does things like alter workspace settings to point at the right virtual environment, and I only know how to do this with VSCode. PR's are very welcome though if you think you can introduce support for your preferred editor! Remove \u00b6 Another easy one! remove does exactly what it says. It will recursively delete an entire project from your local projects directory. Since this is quite a destructive action, pytoil will prompt you to confirm before it does anything. If you say no, the entire process will be aborted and your project will be left alone! Warning The deletion of a project like this is irreversible. It does not send the folder to Trash, it simply erases it from all existence in the universe, so make sure you know what you're doing before saying yes! Don't Panic! Don't worry though, remove DOES NOT go near anything on your GitHub. pytoil only makes HTTP GET requests to the GitHub API so you couldn't even delete a repo if you wanted to, in fact you can't make any changes to any GitHub repo with pytoil whatsoever so you're completely safe! $ pytoil project remove my_project # This will remove 'my_project' from your local filesystem. Are you sure? [ y/N ] :$ y Removing project: 'my_project'. Done! And if you say no... $ pytoil project remove my_project # This will remove 'my_project' from your local filesystem. Are you sure? [ y/N ] :$ n Aborted!","title":"Project"},{"location":"commands/project.html#project","text":"Now let's look at the project subcommand. This is the biggest subcommand in pytoil and probably the part you'll interact with the most. Again, we'll start with the help.","title":"Project"},{"location":"commands/project.html#help","text":"$ pytoil project --help Usage: pytoil project [OPTIONS] COMMAND [ARGS]... Operate on a specific project. Set the \"projects_dir\" key in the config to control where this command looks on your local file system. Set the \"token\" key in the config to give pytoil access to your GitHub via the API. We only make GET requests, your repos are safe with pytoil! Options: --help Show this message and exit. Commands: checkout Checkout a development project, either locally or from GitHub. create Create a new development project locally. info Show useful information about a project. remove Deletes a project from your local filesystem. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil project create --help","title":"Help"},{"location":"commands/project.html#create","text":"create will make you a new project locally. You have the option to create a new virtual environment with it and to create the project from a cookiecutter template","title":"Create"},{"location":"commands/project.html#no-options","text":"If you don't give any options, the default behaviour is to just make a new empty folder with no virtual environment for you to do whatever you want with! In this sense, you don't have to be a python developer to use pytoil! $ pytoil project create my_new_project Creating new project: 'my_new_project' // Does some stuff...","title":"No Options"},{"location":"commands/project.html#include-virtual-environment","text":"If you are a python developer though, chances are you'll want to create a virtual environment with your project. pytoil supports both virtualenv and conda environments, although for the latter you'll have to have the conda package manager already installed on your system. I personally recommend miniconda as you get the package manager but none of the bundled packages (which can be quite large!). Info If you don't know what conda is: as a general rule, you'll want to use virtualenv on most python projects (particularly packages i.e. things that can be pip installed). If you do a lot of work with data (think pandas, numpy, scikit-learn) you'll probably want to use conda as a lot of python data tools include native C libraries which require compiling, and conda makes this happen seamlessly All you have to do is specify which virtual environment to create, using the --venv/-v option flag. You can choose from virtualenv or conda . The default is None . $ pytoil project create my_new_project --venv virtualenv Creating new project: 'my_new_project' Creating virtualenv for: 'my_new_project' Or with conda... $ pytoil project create my_new_project --venv conda Creating new project: 'my_new_project' Creating conda environment for: 'my_new_project' // Conda environments typically take a bit longer to make as it has to do a bit more work!","title":"Include Virtual Environment"},{"location":"commands/project.html#build-a-project-from-a-cookiecutter-template","text":"If you don't know what cookiecutter is, go and check them out! Essentially, it is a templating engine for development projects and, after asking you a few questions, it can dynamically insert and modify text inside your project, set up directory structure and all sorts of cool automation stuff! It means that if you find a template you like (or make your own) you can use it as the base for development projects without having to create so much boilerplate at the beginning, they're great Note In fact, pytoil was itself started from a cookiecutter template! Because I love cookiecutter so much, I built pytoil to support them easily. You can create a new project from a cookiecutter template by using the --cookie/-c flag like this: // Just pass a url to a cookiecutter template $ pytoil project create my_new_project --cookie https://github.com/some/cookie.git Creating new project: 'my_new_project' from cookiecutter: 'https://github.com/some/cookie.git'","title":"Build a project from a Cookiecutter Template"},{"location":"commands/project.html#info","text":"This one's easy! info simply shows you some summary information about whatever project you tell it to. // Let's get some info about pytoil $ pytoil project info pytoil Info for: pytoil name: pytoil description: CLI to automate the development workflow. created_at: 2021-02-04T15:05:23Z updated_at: 2021-03-02T11:09:08Z size: 219 license: Apache License 2.0 remote: True local: True What happens here is pytoil uses the GitHub personal access token we talked about in config and hits the GitHub API to find out some basic information about the repo you pass to it pytoil will always prefer this way of doing it as we can get things like license information and description which is a bit more helpful to show. If however, the project you're asking for information about does not exist on GitHub yet, you'll still get some info back! // Some project thats not on GitHub yet $ pytoil project info my_local_project Info for: my_local_project name: my_local_project created_at: 2021-02-27 12:37:18 updated_at: 2021-02-27 12:48:18 size: 256 local: True remote: False Note pytoil grabs this data from your operating system by using the Path.stat() method from pathlib","title":"Info"},{"location":"commands/project.html#checkout","text":"checkout (not to be confused with git checkout ) allows to easily resume work on an ongoing development project. If the project is available locally, checkout will simply open it for you // Some project thats already local $ pytoil project checkout my_local_project Project: 'my_local_project' found locally! Opening 'my_github_project' in VSCode... If not, checkout will: Clone it to your projects directory Detect what type of project it is (conda or virtualenv) Create the required virtual environment for you automatically Open it for you (if you configure VSCode in config ) // Some project thats on GitHub $ pytoil project checkout my_github_project Project: 'my_github_project' found on GitHub! Cloning... // You might see some git clone output here Auto-creating correct virtual environment // Here you might see some conda or virtualenv stuff Opening 'my_github_project' in VSCode... Why just VSCode? When developing pytoil I was debating how to handle this. I use VSCode for everything but I know other people have different editor preferences. Initially I looked at using the $EDITOR environment variable but working out how best to launch a variety of possible editors from a CLI was tricky. Plus pytoil does things like alter workspace settings to point at the right virtual environment, and I only know how to do this with VSCode. PR's are very welcome though if you think you can introduce support for your preferred editor!","title":"Checkout"},{"location":"commands/project.html#remove","text":"Another easy one! remove does exactly what it says. It will recursively delete an entire project from your local projects directory. Since this is quite a destructive action, pytoil will prompt you to confirm before it does anything. If you say no, the entire process will be aborted and your project will be left alone! Warning The deletion of a project like this is irreversible. It does not send the folder to Trash, it simply erases it from all existence in the universe, so make sure you know what you're doing before saying yes! Don't Panic! Don't worry though, remove DOES NOT go near anything on your GitHub. pytoil only makes HTTP GET requests to the GitHub API so you couldn't even delete a repo if you wanted to, in fact you can't make any changes to any GitHub repo with pytoil whatsoever so you're completely safe! $ pytoil project remove my_project # This will remove 'my_project' from your local filesystem. Are you sure? [ y/N ] :$ y Removing project: 'my_project'. Done! And if you say no... $ pytoil project remove my_project # This will remove 'my_project' from your local filesystem. Are you sure? [ y/N ] :$ n Aborted!","title":"Remove"},{"location":"commands/show.html","text":"Show \u00b6 We've seen some pytoil commands, mainly init and config , but these are both meta and control pytoil itself. Let's look at how you can use pytoil to help you The first subcommand we will look at is pytoil show . show does what it says on the tin and provides a nice way of showing your local and remote projects. Note show always shows the projects in alphabetical order Let's start with the help... Help \u00b6 $ pytoil show --help Usage: pytoil show [OPTIONS] COMMAND [ARGS]... View your local/remote projects. Options: --help Show this message and exit. Commands: all Show both local and remote projects. diff Show the difference in local/remote projects. local Show all your local projects. remote Show all your remote projects. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil show local --help All \u00b6 all will show you... well all of your projects, separated by whether they are local (already available on your computer) or remote (on your GitHub, may or may not also be local). $ pytoil show all Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote Projects: - Cloned1 - Cloned2 - Remote1 Note In this snippet, the user has already cloned Cloned1 and Cloned2 so they show up in both sections. If you want to only show remote projects that you don't have locally, you need the diff command. Keep scrolling Local \u00b6 local shows all the projects you already have in your configured projects directory (see config for how to set this!). $ pytoil show local Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote \u00b6 remote shows all the projects on your GitHub (you may or may not have some of these locally too). $ pytoil show remote Remote Projects: - Cloned1 - Cloned2 - Remote1 Diff \u00b6 diff shows all the projects you have on GitHub, but don't yet exist locally. If your local projects folder has all your GitHub projects in it, nothing will be shown. $ pytoil show diff Remote projects that are not local: - Remote1 - etc...","title":"Show"},{"location":"commands/show.html#show","text":"We've seen some pytoil commands, mainly init and config , but these are both meta and control pytoil itself. Let's look at how you can use pytoil to help you The first subcommand we will look at is pytoil show . show does what it says on the tin and provides a nice way of showing your local and remote projects. Note show always shows the projects in alphabetical order Let's start with the help...","title":"Show"},{"location":"commands/show.html#help","text":"$ pytoil show --help Usage: pytoil show [OPTIONS] COMMAND [ARGS]... View your local/remote projects. Options: --help Show this message and exit. Commands: all Show both local and remote projects. diff Show the difference in local/remote projects. local Show all your local projects. remote Show all your remote projects. Tip Remember, each subcommand has its own help you can check out too. e.g. pytoil show local --help","title":"Help"},{"location":"commands/show.html#all","text":"all will show you... well all of your projects, separated by whether they are local (already available on your computer) or remote (on your GitHub, may or may not also be local). $ pytoil show all Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2 Remote Projects: - Cloned1 - Cloned2 - Remote1 Note In this snippet, the user has already cloned Cloned1 and Cloned2 so they show up in both sections. If you want to only show remote projects that you don't have locally, you need the diff command. Keep scrolling","title":"All"},{"location":"commands/show.html#local","text":"local shows all the projects you already have in your configured projects directory (see config for how to set this!). $ pytoil show local Local Projects: - Local1 - Local2 - Local3 - Cloned1 - Cloned2","title":"Local"},{"location":"commands/show.html#remote","text":"remote shows all the projects on your GitHub (you may or may not have some of these locally too). $ pytoil show remote Remote Projects: - Cloned1 - Cloned2 - Remote1","title":"Remote"},{"location":"commands/show.html#diff","text":"diff shows all the projects you have on GitHub, but don't yet exist locally. If your local projects folder has all your GitHub projects in it, nothing will be shown. $ pytoil show diff Remote projects that are not local: - Remote1 - etc...","title":"Diff"},{"location":"commands/sync.html","text":"Sync \u00b6 sync does exactly what it sounds like, it provides a nice easy way to pull down multiple projects at once and saves you having to type git clone like a million times Any projects you already have locally will be completely skipped by sync so it's impossible to overwrite any local changes to projects Help \u00b6 $ pytoil sync --help Usage: pytoil sync [OPTIONS] COMMAND [ARGS]... Synchronise your local and remote projects. sync is a safe method in that existing local projects will not be modified in any way. Options: --help Show this message and exit. Commands: all Pull down all your remote projects that aren't already local. these Only pull down specified remote projects. All \u00b6 When you run pytoil sync all pytoil will scan your projects directory and your GitHub repos to calculate what's missing locally and then go and grab the missing projects from GitHub one by one. $ pytoil sync all # This will clone 7 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... Warning If you have lots of GitHub repos this could take a while, you might be better off selecting specific repos to sync by using pytoil sync these . More on that down here However, it will prompt you telling you exactly how many repos it is going to clone and ask you to confirm! This confirmation can be disabled by using the --force/-f flag. $ pytoil sync all // This person has a LOT of repos # This will clone 1375 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted! These \u00b6 If you have a lot of repos or you only want a few of them, pytoil sync these is what you want! these accepts a space-separated list of repo names as an argument and it will again check if you already have any of these locally (and skip them if you do) and finally do the cloning. Like so: $ pytoil sync these repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... And just like all you can abort the whole operation by entering n when prompted. $ pytoil sync these repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"Sync"},{"location":"commands/sync.html#sync","text":"sync does exactly what it sounds like, it provides a nice easy way to pull down multiple projects at once and saves you having to type git clone like a million times Any projects you already have locally will be completely skipped by sync so it's impossible to overwrite any local changes to projects","title":"Sync"},{"location":"commands/sync.html#help","text":"$ pytoil sync --help Usage: pytoil sync [OPTIONS] COMMAND [ARGS]... Synchronise your local and remote projects. sync is a safe method in that existing local projects will not be modified in any way. Options: --help Show this message and exit. Commands: all Pull down all your remote projects that aren't already local. these Only pull down specified remote projects.","title":"Help"},{"location":"commands/sync.html#all","text":"When you run pytoil sync all pytoil will scan your projects directory and your GitHub repos to calculate what's missing locally and then go and grab the missing projects from GitHub one by one. $ pytoil sync all # This will clone 7 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... Warning If you have lots of GitHub repos this could take a while, you might be better off selecting specific repos to sync by using pytoil sync these . More on that down here However, it will prompt you telling you exactly how many repos it is going to clone and ask you to confirm! This confirmation can be disabled by using the --force/-f flag. $ pytoil sync all // This person has a LOT of repos # This will clone 1375 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"All"},{"location":"commands/sync.html#these","text":"If you have a lot of repos or you only want a few of them, pytoil sync these is what you want! these accepts a space-separated list of repo names as an argument and it will again check if you already have any of these locally (and skip them if you do) and finally do the cloning. Like so: $ pytoil sync these repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ y Cloning 'repo1'... Cloning 'repo2'... etc... And just like all you can abort the whole operation by entering n when prompted. $ pytoil sync these repo1 repo2 repo3 cloned1 // In this snippet, our user already has 'cloned1' locally so it's skipped # This will clone 3 repos. Are you sure you wish to proceed? [ y/N ] :$ n Aborted!","title":"These"}]}